///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        05/Jun/2019  10:52:58 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\cc2530testing\Zigbee终极无敌代码 -             /
//                          副本\Projects\SappWsn\Source\SAPP_FrameWork.c     /
//    Command line       =  -f "F:\cc2530testing\Zigbee终极无敌代码 -         /
//                          副本\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8 /
//                          wRouter.cfg" (-DCPU32MHZ -DROOT=__near_func       /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "F:\cc2530testing\Zigbee终极无敌代码 -            /
//                          副本\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8 /
//                          wConfig.cfg" (-DZIGBEEPRO -DSECURE=0              /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00020000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x0213                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "F:\cc2530testing\Zigbee终 /
//                          极无敌代码 - 副本\Projects\SappWsn\Source\SAPP_Fr /
//                          ameWork.c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC  /
//                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D LIGHT    /
//                          -lC "F:\cc2530testing\Zigbee终极无敌代码 -        /
//                          副本\Projects\SappWsn\RouterLightControl\List\"   /
//                          -lA "F:\cc2530testing\Zigbee终极无敌代码 -        /
//                          副本\Projects\SappWsn\RouterLightControl\List\"   /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "F:\cc2530testing\Zigbee终极无敌代码 -            /
//                          副本\Projects\SappWsn\RouterLightControl\Obj\"    /
//                          -e --no_code_motion --debug --core=plain          /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "F:\cc2530testing\Zigbee终极无敌代码 -            /
//                          副本\Projects\SappWsn\" -I                        /
//                          "F:\cc2530testing\Zigbee终极无敌代码 -            /
//                          副本\Projects\SappWsn\Source\" -I                 /
//                          "F:\cc2530testing\Zigbee终极无敌代码 -            /
//                          副本\Projects\SappWsn\..\zstack\ZMain\TI2530DB\"  /
//                          -I "F:\cc2530testing\Zigbee终极无敌代码 -         /
//                          副本\Projects\SappWsn\..\..\Components\hal\includ /
//                          e\" -I "F:\cc2530testing\Zigbee终极无敌代码 -     /
//                          副本\Projects\SappWsn\..\..\Components\hal\target /
//                          \CC2530EB\" -I "F:\cc2530testing\Zigbee终极无敌代 /
//                          码 - 副本\Projects\SappWsn\..\..\Components\mac\i /
//                          nclude\" -I "F:\cc2530testing\Zigbee终极无敌代码  /
//                          - 副本\Projects\SappWsn\..\..\Components\mac\high /
//                          _level\" -I "F:\cc2530testing\Zigbee终极无敌代码  /
//                          - 副本\Projects\SappWsn\..\..\Components\mac\low_ /
//                          level\srf04\" -I "F:\cc2530testing\Zigbee终极无敌 /
//                          代码 - 副本\Projects\SappWsn\..\..\Components\mac /
//                          \low_level\srf04\single_chip\" -I                 /
//                          "F:\cc2530testing\Zigbee终极无敌代码 -            /
//                          副本\Projects\SappWsn\..\..\Components\mt\" -I    /
//                          "F:\cc2530testing\Zigbee终极无敌代码 -            /
//                          副本\Projects\SappWsn\..\..\Components\osal\inclu /
//                          de\" -I "F:\cc2530testing\Zigbee终极无敌代码 -    /
//                          副本\Projects\SappWsn\..\..\Components\services\s /
//                          addr\" -I "F:\cc2530testing\Zigbee终极无敌代码 -  /
//                          副本\Projects\SappWsn\..\..\Components\services\s /
//                          data\" -I "F:\cc2530testing\Zigbee终极无敌代码 -  /
//                          副本\Projects\SappWsn\..\..\Components\stack\af\" /
//                           -I "F:\cc2530testing\Zigbee终极无敌代码 -        /
//                          副本\Projects\SappWsn\..\..\Components\stack\nwk\ /
//                          " -I "F:\cc2530testing\Zigbee终极无敌代码 -       /
//                          副本\Projects\SappWsn\..\..\Components\stack\sapi /
//                          \" -I "F:\cc2530testing\Zigbee终极无敌代码 -      /
//                          副本\Projects\SappWsn\..\..\Components\stack\sec\ /
//                          " -I "F:\cc2530testing\Zigbee终极无敌代码 -       /
//                          副本\Projects\SappWsn\..\..\Components\stack\sys\ /
//                          " -I "F:\cc2530testing\Zigbee终极无敌代码 -       /
//                          副本\Projects\SappWsn\..\..\Components\stack\zdo\ /
//                          " -I "F:\cc2530testing\Zigbee终极无敌代码 -       /
//                          副本\Projects\SappWsn\..\..\Components\zmac\" -I  /
//                          "F:\cc2530testing\Zigbee终极无敌代码 -            /
//                          副本\Projects\SappWsn\..\..\Components\zmac\f8w\" /
//                           -Ohz --require_prototypes                        /
//    List file          =  F:\cc2530testing\Zigbee终极无敌代码 -             /
//                          副本\Projects\SappWsn\RouterLightControl\List\SAP /
//                          P_FrameWork.s51                                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SAPP_FrameWork

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??CreateUserTimer?relay
        FUNCTION ??CreateUserTimer?relay,0203H
        PUBLIC ??Delay100us?relay
        FUNCTION ??Delay100us?relay,0203H
        PUBLIC ??DeleteUserTimer?relay
        FUNCTION ??DeleteUserTimer?relay,0203H
        PUBLIC ??ModifyRefreshCycle?relay
        FUNCTION ??ModifyRefreshCycle?relay,0203H
        PUBLIC ??RouterIncomingRoutine?relay
        FUNCTION ??RouterIncomingRoutine?relay,0203H
        PUBLIC ??RouterTimeoutRoutine?relay
        FUNCTION ??RouterTimeoutRoutine?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB2?relay
        FUNCTION ??SampleApp_MessageMSGCB2?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SendData?relay
        FUNCTION ??SendData?relay,0203H
        FUNCTION ??controlEpProcess?relay,0203H
        FUNCTION ??createEndPoint?relay,0203H
        FUNCTION ??functionEpProcess?relay,0203H
        PUBLIC ??osalInitTasks?relay
        FUNCTION ??osalInitTasks?relay,0203H
        FUNCTION ??taskInitProcess?relay,0203H
        PUBLIC CreateUserTimer
        FUNCTION CreateUserTimer,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Delay100us
        FUNCTION Delay100us,080203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC DeleteUserTimer
        FUNCTION DeleteUserTimer,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ModifyRefreshCycle
        FUNCTION ModifyRefreshCycle,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC MotorValue
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBWEAK P2DIR
        PUBLIC RouterIncomingRoutine
        FUNCTION RouterIncomingRoutine,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC RouterTimeoutRoutine
        FUNCTION RouterTimeoutRoutine,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC SampleApp_MessageMSGCB2
        FUNCTION SampleApp_MessageMSGCB2,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC SegValue
        PUBLIC SendData
        FUNCTION SendData,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC SrcShortAddr
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        FUNCTION controlEpProcess,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION createEndPoint,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC funcTableBuffer
        FUNCTION functionEpProcess,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC osalInitTasks
        FUNCTION osalInitTasks,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION taskInitProcess,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC tasksArr
        PUBLIC tasksCnt
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
macTaskInit         SYMBOL "macTaskInit"
nwk_init            SYMBOL "nwk_init"
Hal_Init            SYMBOL "Hal_Init"
MT_TaskInit         SYMBOL "MT_TaskInit"
APS_Init            SYMBOL "APS_Init"
APSF_Init           SYMBOL "APSF_Init"
ZDApp_Init          SYMBOL "ZDApp_Init"
ZDNwkMgr_Init       SYMBOL "ZDNwkMgr_Init"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
afRegister          SYMBOL "afRegister"
osal_msg_receive    SYMBOL "osal_msg_receive"
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
memcpy              SYMBOL "memcpy"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
HalLedBlink         SYMBOL "HalLedBlink"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
AF_DataRequest      SYMBOL "AF_DataRequest"
MT_UartCalcFCS      SYMBOL "MT_UartCalcFCS"
HalUARTWrite        SYMBOL "HalUARTWrite"
Sensor_PIN_INT      SYMBOL "Sensor_PIN_INT"
osal_mem_free       SYMBOL "osal_mem_free"
osal_memset         SYMBOL "osal_memset"
osal_memcpy         SYMBOL "osal_memcpy"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??APSF_Init?relay   SYMBOL "?relay", APSF_Init
`?<Name APSF_ProcessEvent 27>` SYMBOL "APSF_ProcessEvent"
??APSF_ProcessEvent?relay SYMBOL "?relay", `?<Name APSF_ProcessEvent 27>`
??APS_Init?relay    SYMBOL "?relay", APS_Init
`?<Name APS_event_loop 30>` SYMBOL "APS_event_loop"
??APS_event_loop?relay SYMBOL "?relay", `?<Name APS_event_loop 30>`
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??Hal_Init?relay    SYMBOL "?relay", Hal_Init
`?<Name Hal_ProcessEvent 35>` SYMBOL "Hal_ProcessEvent"
??Hal_ProcessEvent?relay SYMBOL "?relay", `?<Name Hal_ProcessEvent 35>`
`?<Name MT_ProcessEvent 37>` SYMBOL "MT_ProcessEvent"
??MT_ProcessEvent?relay SYMBOL "?relay", `?<Name MT_ProcessEvent 37>`
??MT_TaskInit?relay SYMBOL "?relay", MT_TaskInit
??MT_UartCalcFCS?relay SYMBOL "?relay", MT_UartCalcFCS
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??Sensor_PIN_INT?relay SYMBOL "?relay", Sensor_PIN_INT
??ZDApp_Init?relay  SYMBOL "?relay", ZDApp_Init
`?<Name ZDApp_event_loop 45>` SYMBOL "ZDApp_event_loop"
??ZDApp_event_loop?relay SYMBOL "?relay", `?<Name ZDApp_event_loop 45>`
??ZDNwkMgr_Init?relay SYMBOL "?relay", ZDNwkMgr_Init
`?<Name ZDNwkMgr_event_loop 48>` SYMBOL "ZDNwkMgr_event_loop"
??ZDNwkMgr_event_loop?relay SYMBOL "?relay", `?<Name ZDNwkMgr_event_loop 48>`
??afRegister?relay  SYMBOL "?relay", afRegister
`?<Name macEventLoop 51>` SYMBOL "macEventLoop"
??macEventLoop?relay SYMBOL "?relay", `?<Name macEventLoop 51>`
??macTaskInit?relay SYMBOL "?relay", macTaskInit
??memcpy?relay      SYMBOL "?relay", memcpy
`?<Name nwk_event_loop 55>` SYMBOL "nwk_event_loop"
??nwk_event_loop?relay SYMBOL "?relay", `?<Name nwk_event_loop 55>`
??nwk_init?relay    SYMBOL "?relay", nwk_init
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
CreateUserTimer     SYMBOL "CreateUserTimer"
??CreateUserTimer?relay SYMBOL "?relay", CreateUserTimer
Delay100us          SYMBOL "Delay100us"
??Delay100us?relay  SYMBOL "?relay", Delay100us
DeleteUserTimer     SYMBOL "DeleteUserTimer"
??DeleteUserTimer?relay SYMBOL "?relay", DeleteUserTimer
ModifyRefreshCycle  SYMBOL "ModifyRefreshCycle"
??ModifyRefreshCycle?relay SYMBOL "?relay", ModifyRefreshCycle
RouterIncomingRoutine SYMBOL "RouterIncomingRoutine"
??RouterIncomingRoutine?relay SYMBOL "?relay", RouterIncomingRoutine
RouterTimeoutRoutine SYMBOL "RouterTimeoutRoutine"
??RouterTimeoutRoutine?relay SYMBOL "?relay", RouterTimeoutRoutine
SampleApp_MessageMSGCB2 SYMBOL "SampleApp_MessageMSGCB2"
??SampleApp_MessageMSGCB2?relay SYMBOL "?relay", SampleApp_MessageMSGCB2
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SendData            SYMBOL "SendData"
??SendData?relay    SYMBOL "?relay", SendData
osalInitTasks       SYMBOL "osalInitTasks"
??osalInitTasks?relay SYMBOL "?relay", osalInitTasks

        EXTERN macTaskInit
        FUNCTION macTaskInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_init
        FUNCTION nwk_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_Init
        FUNCTION Hal_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_TaskInit
        FUNCTION MT_TaskInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APS_Init
        FUNCTION APS_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSF_Init
        FUNCTION APSF_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_Init
        FUNCTION ZDApp_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDNwkMgr_Init
        FUNCTION ZDNwkMgr_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartCalcFCS
        FUNCTION MT_UartCalcFCS,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sensor_PIN_INT
        FUNCTION Sensor_PIN_INT,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??APSF_Init?relay
        FUNCTION ??APSF_Init?relay,00H
        EXTERN ??APSF_ProcessEvent?relay
        FUNCTION ??APSF_ProcessEvent?relay,00H
        EXTERN ??APS_Init?relay
        FUNCTION ??APS_Init?relay,00H
        EXTERN ??APS_event_loop?relay
        FUNCTION ??APS_event_loop?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??Hal_Init?relay
        FUNCTION ??Hal_Init?relay,00H
        EXTERN ??Hal_ProcessEvent?relay
        FUNCTION ??Hal_ProcessEvent?relay,00H
        EXTERN ??MT_ProcessEvent?relay
        FUNCTION ??MT_ProcessEvent?relay,00H
        EXTERN ??MT_TaskInit?relay
        FUNCTION ??MT_TaskInit?relay,00H
        EXTERN ??MT_UartCalcFCS?relay
        FUNCTION ??MT_UartCalcFCS?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??Sensor_PIN_INT?relay
        FUNCTION ??Sensor_PIN_INT?relay,00H
        EXTERN ??ZDApp_Init?relay
        FUNCTION ??ZDApp_Init?relay,00H
        EXTERN ??ZDApp_event_loop?relay
        FUNCTION ??ZDApp_event_loop?relay,00H
        EXTERN ??ZDNwkMgr_Init?relay
        FUNCTION ??ZDNwkMgr_Init?relay,00H
        EXTERN ??ZDNwkMgr_event_loop?relay
        FUNCTION ??ZDNwkMgr_event_loop?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??macEventLoop?relay
        FUNCTION ??macEventLoop?relay,00H
        EXTERN ??macTaskInit?relay
        FUNCTION ??macTaskInit?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??nwk_event_loop?relay
        FUNCTION ??nwk_event_loop?relay,00H
        EXTERN ??nwk_init?relay
        FUNCTION ??nwk_init?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN funcCount
        EXTERN funcList
        EXTERN seg7table

// F:\cc2530testing\Zigbee终极无敌代码 - 副本\Projects\SappWsn\Source\SAPP_FrameWork.c
//    1 #include "SAPP_FrameWork.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//    2 #include <string.h>
//    3 #include <Lcd_Dis.h>
//    4 #include "hal_lcd.h"
//    5 /*********************************************************************
//    6  * FUNCTIONS
//    7  *********************************************************************/
//    8 static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep);
//    9 static void taskInitProcess(void);
//   10 static uint16 controlEpProcess(uint8 task_id, uint16 events);
//   11 static UINT16 functionEpProcess( uint8 task_id, uint16 events );
//   12 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//   13 void SampleApp_MessageMSGCB2( afIncomingMSGPacket_t *pckt );

        RSEG XDATA_I:XDATA:NOROOT(0)
//   14 uint16 SrcShortAddr = 0xFFFF;//PeerToPeer时使用
SrcShortAddr:
        DATA16
        DS 2
        REQUIRE `?<Initializer for SrcShortAddr>`
        REQUIRE __INIT_XDATA_I
//   15 void Delay100us(uint16);
//   16 #if defined(ZDO_COORDINATOR) || defined(PEER_ROUTER) || defined(PEER_COORD)
//   17 static uint8 uartMsgProcesser(uint8 *msg);
//   18 #endif
//   19 
//   20 
//   21 
//   22 //uint8 ctrlBuffer[sizeof(TOPOINFO) + sizeof(FUNCTABLE) + FUNC_NUM * sizeof(FUNCINFO)];

        RSEG XDATA_I:XDATA:NOROOT(0)
//   23 static TOPOINFO topoBuffer = { 0x02 };
topoBuffer:
        DATA8
        DS 11
        REQUIRE `?<Initializer for topoBuffer>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   24 FUNCTABLE *funcTableBuffer;// = (FUNCTABLE *)(&ctrlBuffer[sizeof(TOPOINFO)]);
funcTableBuffer:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   25 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   26 const pTaskEventHandlerFn tasksArr[] = {
tasksArr:
        DATA16
        DW ??macEventLoop?relay
        DW ??nwk_event_loop?relay
        DW ??Hal_ProcessEvent?relay
        DW ??MT_ProcessEvent?relay
        DW ??APS_event_loop?relay
        DW ??APSF_ProcessEvent?relay
        DW ??ZDApp_event_loop?relay
        DW ??ZDNwkMgr_event_loop?relay
        DW ??controlEpProcess?relay
        DW ??functionEpProcess?relay
//   27     macEventLoop,
//   28     nwk_event_loop,
//   29     Hal_ProcessEvent,
//   30 #if defined( MT_TASK )
//   31     MT_ProcessEvent,
//   32 #endif
//   33     APS_event_loop,
//   34 #if defined ( ZIGBEE_FRAGMENTATION )
//   35     APSF_ProcessEvent,
//   36 #endif
//   37     ZDApp_event_loop,
//   38 #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
//   39     ZDNwkMgr_event_loop,
//   40 #endif
//   41     controlEpProcess,
//   42     functionEpProcess,
//   43 };

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   44 const uint8 tasksCnt = sizeof(tasksArr)/sizeof(tasksArr[0]);
tasksCnt:
        DB 10
//   45 /*********************************************************************
//   46 *********************************************************************/
//   47 
//   48 /*********************************************************************
//   49  * @fn      osalInitTasks
//   50  *
//   51  * @brief   This function invokes the initialization function for each task.
//   52  *
//   53  * @param   void
//   54  *
//   55  * @return  none
//   56  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   57 void osalInitTasks( void )
osalInitTasks:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function osalInitTasks
        CODE
//   58 {
        FUNCALL osalInitTasks, macTaskInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, nwk_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, Hal_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, MT_TaskInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, APS_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, APSF_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, ZDApp_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, ZDNwkMgr_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, taskInitProcess
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   59   P0DIR = (0x01<<0)|(0x01<<4)|(0x01<<5)|(0x01<<6)|(0x01<<7);  // 设置P0_0,P0_4,P0_5,P06,P0_7 为输出方式 
        MOV     0xfd,#-0xf
//   60   P1DIR = 0xff;  // 设置 P1 为输出方式 
        MOV     0xfe,#-0x1
//   61   P2DIR |= 0x01;  // 设置 P2.0 为输出方式 
        ORL     0xff,#0x1
//   62   P0_7 = 0;//关闭蜂鸣器
        CLR     0x80.7
//   63   //全灭     
//   64   P0 |= (0x1 << 6); 
        SETB    0x80.6
//   65   P1 = 0x0; 
        MOV     0x90,#0x0
//   66                     P0 &= ~(0x1 << 6); 
        CLR     0x80.6
//   67  /* P0DIR = 0xf1;  // 设置 P0.0,P0.4,P0.5,P0.6,P0.7 为输出方式 
//   68   P1DIR = 0xf1;  // 设置 P1.0,P1.4,P1.5,P1.6,P1.7 为输出方式 
//   69   P2DIR |= 0x01;  // 设置 P2.0 为输出方式 */
//   70  // P0DIR = 0x40;  // 设置 P0.6 为输出方式 
//   71 
//   72     uint8 taskID = 0;
//   73 
//   74     macTaskInit( taskID++ );
        ; Setup parameters for call to function macTaskInit
        MOV     R1,#0x0
        LCALL   ??macTaskInit?relay
//   75     nwk_init( taskID++ );
        ; Setup parameters for call to function nwk_init
        MOV     R1,#0x1
        LCALL   ??nwk_init?relay
//   76     Hal_Init( taskID++ );
        ; Setup parameters for call to function Hal_Init
        MOV     R1,#0x2
        LCALL   ??Hal_Init?relay
//   77 #if defined( MT_TASK )
//   78     MT_TaskInit( taskID++ );
        ; Setup parameters for call to function MT_TaskInit
        MOV     R1,#0x3
        LCALL   ??MT_TaskInit?relay
//   79 #endif
//   80     APS_Init( taskID++ );
        ; Setup parameters for call to function APS_Init
        MOV     R1,#0x4
        LCALL   ??APS_Init?relay
//   81 #if defined ( ZIGBEE_FRAGMENTATION )
//   82     APSF_Init( taskID++ );
        ; Setup parameters for call to function APSF_Init
        MOV     R1,#0x5
        LCALL   ??APSF_Init?relay
//   83 #endif
//   84     ZDApp_Init( taskID++ );
        ; Setup parameters for call to function ZDApp_Init
        MOV     R1,#0x6
        LCALL   ??ZDApp_Init?relay
//   85 #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
//   86     ZDNwkMgr_Init( taskID++ );
        ; Setup parameters for call to function ZDNwkMgr_Init
        MOV     R1,#0x7
        LCALL   ??ZDNwkMgr_Init?relay
//   87 #endif
//   88 #if defined(ZDO_COORDINATOR)// || defined(RTR_NWK)    
//   89     ClrScreen();        
//   90     FontSet_cn(1,1);                //16x16	
//   91     PutString_cn(24,0,"网络协调器");
//   92     PutString_cn(0,16,"---------------");
//   93     PutString_cn(8,32,"启动新的网络");	
//   94     PutString_cn(8,48,"正在启动...");	
//   95 #endif  
//   96     taskInitProcess();  
        ; Setup parameters for call to function taskInitProcess
        LCALL   ??taskInitProcess?relay
        CFI EndBlock cfiBlock0
//   97     //Hello_Init(taskID);
//   98     
//   99 //P0_6=0;   //停止直流电机
//  100 }
        REQUIRE ?Subroutine0
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR
        REQUIRE _A_P0
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  101 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  102 static devStates_t curNwkState;
curNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  103 static uint8 controlTaskId;
controlTaskId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  104 static uint8 functionTaskId;
functionTaskId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  105 static struct ep_info_t controlEndPointInfo;
controlEndPointInfo:
        DS 33
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  106 static uint8 isUserTimerRunning = 0;
isUserTimerRunning:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  107 /*********************************************************************
//  108  * LOCAL FUNCTIONS
//  109  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  110 static void taskInitProcess(void)
taskInitProcess:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function taskInitProcess
        CODE
//  111 {
        FUNCALL taskInitProcess, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL taskInitProcess, createEndPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL taskInitProcess, createEndPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  112  #if defined ( BUILD_ALL_DEVICES )
//  113     // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  114     // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  115     // together - if they are - we will start up a coordinator. Otherwise,
//  116     // the device will start as a router.
//  117     if ( readCoordinatorJumper() )
//  118         zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  119     else
//  120         zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  121 #endif // BUILD_ALL_DEVICES
//  122 
//  123 #if defined ( HOLD_AUTO_START )
//  124     // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  125     //  from starting the device and wait for the application to
//  126     //  start the device.
//  127     ZDOInitDevice(0);
//  128 #endif
//  129 
//  130     // 构造功能列表
//  131     funcTableBuffer = createFuncTable(funcCount);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        MOV     B,#0x3
        MUL     AB
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,B
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#funcTableBuffer
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  132     funcTableBuffer->ft_type = 0x01;
        MOV     DPTR,#funcTableBuffer
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  133     funcTableBuffer->ft_count = funcCount;
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#funcTableBuffer
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_75:
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  134     int i;
//  135     for(i = 0; i < funcCount; i++)
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??CrossCallReturnLabel_26
//  136     {
//  137         funcTableBuffer->ft_list[i].type = funcList[i].function.type;
??taskInitProcess_0:
        LCALL   ?Subroutine22 & 0xFFFF
//  138         funcTableBuffer->ft_list[i].id = funcList[i].function.id;
//  139         funcTableBuffer->ft_list[i].cycle = funcList[i].function.cycle;
//  140     }
??CrossCallReturnLabel_44:
        MOV     R0,A
        MOV     A,#(funcList >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     R4,B
        MOV     B,#0x3
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_9:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_35:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_10:
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_20:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_7:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        JC      ??taskInitProcess_0
//  141     controlTaskId = tasksCnt - 2; //排在 tasksArr[] 的最后两个。
        MOV     DPTR,#controlTaskId
        MOV     A,#0x8
        MOVX    @DPTR,A
//  142     functionTaskId = tasksCnt - 1;
        MOV     DPTR,#functionTaskId
        INC     A
        MOVX    @DPTR,A
//  143     createEndPoint(&controlEndPointInfo, &controlTaskId, CONTROL_ENDPOINT);
        ; Setup parameters for call to function createEndPoint
        MOV     R1,#-0x10
        MOV     R4,#controlTaskId & 0xff
        MOV     R5,#(controlTaskId >> 8) & 0xff
        MOV     R2,#controlEndPointInfo & 0xff
        MOV     R3,#(controlEndPointInfo >> 8) & 0xff
        LCALL   ??createEndPoint?relay
//  144     for(i = 0; i < funcCount; i++)
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??CrossCallReturnLabel_27
//  145     {
//  146         struct ep_info_t *ep = &funcList[i];
??taskInitProcess_1:
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     ?V0 + 0,A
        MOV     A,#(funcList >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 1,A
//  147         createEndPoint(ep, &functionTaskId, i + 1);
        ; Setup parameters for call to function createEndPoint
        MOV     A,R6
        INC     A
        MOV     R1,A
        MOV     R4,#functionTaskId & 0xff
        MOV     R5,#(functionTaskId >> 8) & 0xff
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??createEndPoint?relay
//  148         if(ep->res_available)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_51:
        JZ      ??taskInitProcess_2
//  149           (*ep->res_available)(ep, ResInit, NULL);
        ; Setup parameters for indirect call
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R1,#0x1
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine45_0 & 0xFFFF
//  150     }
??CrossCallReturnLabel_71:
        LCALL   ?CALL_IND
??taskInitProcess_2:
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??taskInitProcess_1
        CFI EndBlock cfiBlock2
//  151 #if defined(ZDO_COORDINATOR) || defined(PEER_ROUTER) || defined(PEER_COORD)   
//  152 //  RegisterForKeys( SampleApp_TaskID );
//  153     MT_UartRegisterTaskID(controlTaskId);     
//  154 #endif  
//  155 }
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x21
        MOV     A,R1
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#funcList & 0xff
        ADD     A,R0
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+-1
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     DPTR,#funcTableBuffer
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R4
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG XDATA_I:XDATA:NOROOT(0)
??commonClusterId:
        DATA16
        DS 2
        REQUIRE `?<Initializer for commonClusterId>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        INC     DPTR
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        INC     DPTR
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
//  156 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  157 static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep)
createEndPoint:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function createEndPoint
        CODE
//  158 {
        FUNCALL createEndPoint, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  159     static cId_t commonClusterId = SAPP_PERIODIC_CLUSTERID;
//  160     // Fill out the endpoint description.
//  161     epInfo->task_id = *task_id;
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,#0xc
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_57:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  162     epInfo->ep = ep;
        MOV     A,R2
        ADD     A,#0xb
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     A,R1
        LCALL   ?Subroutine19 & 0xFFFF
//  163     epInfo->timerTick = epInfo->function.cycle;
??CrossCallReturnLabel_21:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,#0xd
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_59:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  164     epInfo->userTimer = 0;
        LCALL   ?Subroutine15 & 0xFFFF
//  165 
//  166     epInfo->simpleDesc.EndPoint = ep;
??CrossCallReturnLabel_84:
        MOV     A,R2
        ADD     A,#0x15
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,R6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
//  167     epInfo->simpleDesc.AppProfId = SAPP_PROFID;
        MOV     A,R2
        ADD     A,#0x16
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xf
        MOVX    @DPTR,A
//  168     epInfo->simpleDesc.AppDeviceId = SAPP_DEVICEID;
        MOV     A,R2
        ADD     A,#0x18
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  169     epInfo->simpleDesc.AppDevVer = SAPP_DEVICE_VERSION;
//  170     epInfo->simpleDesc.Reserved = 0;
        MOV     A,R2
        ADD     A,#0x1a
        LCALL   ??Subroutine46_0 & 0xFFFF
//  171     epInfo->simpleDesc.AppNumInClusters = 1;
??CrossCallReturnLabel_82:
        MOV     A,R2
        ADD     A,#0x1b
        LCALL   ?Subroutine17 & 0xFFFF
//  172     epInfo->simpleDesc.pAppInClusterList = &commonClusterId;
??CrossCallReturnLabel_18:
        ADD     A,#0x1c
        LCALL   ?Subroutine16 & 0xFFFF
//  173     epInfo->simpleDesc.AppNumOutClusters = 1;
??CrossCallReturnLabel_16:
        ADD     A,#0x1e
        LCALL   ?Subroutine17 & 0xFFFF
//  174     epInfo->simpleDesc.pAppOutClusterList = &commonClusterId;
??CrossCallReturnLabel_19:
        ADD     A,#0x1f
        LCALL   ?Subroutine16 & 0xFFFF
//  175 
//  176     epInfo->SampleApp_epDesc.endPoint = ep;
??CrossCallReturnLabel_17:
        ADD     A,#0xf
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
//  177     epInfo->SampleApp_epDesc.task_id = task_id;
        MOV     A,R2
        ADD     A,#0x10
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  178     epInfo->SampleApp_epDesc.simpleDesc = &epInfo->simpleDesc;
        MOV     A,R2
        ADD     A,#0x12
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  179     epInfo->SampleApp_epDesc.latencyReq = noLatencyReqs;
        MOV     A,R2
        ADD     A,#0x14
        LCALL   ??Subroutine46_0 & 0xFFFF
//  180 
//  181     // Register the endpoint description with the AF
//  182     afRegister(&epInfo->SampleApp_epDesc);
??CrossCallReturnLabel_83:
        ; Setup parameters for call to function afRegister
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        LCALL   ??afRegister?relay
//  183 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_36:
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_20
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_21
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+-1
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+-1
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+-1
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+-1
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_99:
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_101:
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R2
        RET
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond89 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_19
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_16
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_17
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_84
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_85
        CFI (cfiCond94) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond94) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond94) CFA_SP SP+-5
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_82
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_83
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker97 Using cfiCommon1
        CFI (cfiPicker97) NoFunction
        CFI (cfiPicker97) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiPicker97
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_58
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_59
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+-1
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_60
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_61
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_62
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_63
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_64
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_55
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+-1
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_56
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+-1
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_3
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_4
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_11
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_12
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_13
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_14
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_15
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_92
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_93
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_91
        CFI (cfiCond117) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond117) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond117) CFA_SP SP+-5
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_86
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_87
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_88
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_89
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_90
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_80
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_81
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_18
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_19
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_16
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_17
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_84
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_85
        CFI (cfiCond130) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond130) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond130) CFA_SP SP+-5
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_82
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_83
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker133 Using cfiCommon1
        CFI (cfiPicker133) NoFunction
        CFI (cfiPicker133) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond134 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker136 Using cfiCommon1
        CFI (cfiPicker136) NoFunction
        CFI (cfiPicker136) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV     A,#??commonClusterId & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??commonClusterId >> 8) & 0xff
        MOVX    @DPTR,A
        MOV     A,R2
        RET
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiPicker136
//  184 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  185 static uint16 controlEpProcess(uint8 task_id, uint16 events)
controlEpProcess:
        CFI Block cfiBlock137 Using cfiCommon0
        CFI Function controlEpProcess
        CODE
//  186 {
        FUNCALL controlEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  187     afIncomingMSGPacket_t *MSGpkt;
//  188     //系统消息事件。
//  189     if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??controlEpProcess_0 & 0xFFFF
//  190     {
//  191         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(task_id);
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??controlEpProcess_1
//  192         while ( MSGpkt )
//  193         {                
//  194             switch ( MSGpkt->hdr.event )
//  195             {         
//  196 //#if defined(ZDO_COORDINATOR) 
//  197 #if defined(ZDO_COORDINATOR) || defined(PEER_ROUTER) || defined(PEER_COORD)              
//  198             case CMD_SERIAL_MSG:
//  199 //              SampleApp_UartMessage((uint8 *)MSGpkt);                                          
//  200                 uartMsgProcesser((uint8 *)MSGpkt);
//  201                 HalLedBlink( HAL_LED_1, 2, 50, 90 );
//  202                 break;
//  203 #endif
//  204             // Received when a messages is received (OTA) for this endpoint
//  205             case AF_INCOMING_MSG_CMD:
//  206             {           
//  207                 #if defined(PEER_ROUTER) || defined(PEER_COORD)
//  208                     HalUARTWrite(HAL_UART_PORT_0, &(MSGpkt->cmd.Data[0]), 2);
//  209                     break;
//  210                 #endif
//  211                 // TODO: QueryProfile or QueryTopo
//  212                 switch(MSGpkt->clusterId)
//  213                 {
//  214                 case SAPP_PERIODIC_CLUSTERID:
//  215                     switch(MSGpkt->cmd.Data[0])
//  216                     {
//  217                     case 0x01:
//  218                         // CtrlQueryProfile
//  219                         // 获取到数据包的来源地址来当做发送数据的目标
//  220                         SendData(CONTROL_ENDPOINT, funcTableBuffer->ft_data, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(FUNCTABLE) + funcCount * sizeof(FUNCINFO));
//  221                         break;
//  222                     case 0x02:
//  223                         // CtrlQueryTopo
//  224                         // 获取到数据包的来源地址来当做发送数据的目标
//  225                         SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(TOPOINFO));                        
//  226                         break;
//  227                     case 0x03:
//  228                         // CtrlQuerySpecialFunction
//  229                         // cmd.Data[0] = 3, cmd.Data[1] = funcCode, cmd.Data[2] = funcID
//  230                         {
//  231                             uint8 i;
//  232                             for(i = 0; i < funcTableBuffer->ft_count; i++)
//  233                             {
//  234                                 if((funcTableBuffer->ft_list[i].type == MSGpkt->cmd.Data[1])
//  235                                    && (funcTableBuffer->ft_list[i].id == MSGpkt->cmd.Data[2]))
//  236                                 {
//  237                                     // 0x03, EndPoint, rCycle
//  238                                     uint8 specialFunc[3] = { 0x03, i + 1, funcTableBuffer->ft_list[i].cycle };
//  239                                     SendData(CONTROL_ENDPOINT, specialFunc, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(specialFunc));
//  240                                     break;
//  241                                 }
//  242                             }
//  243                         }
//  244                         break;
//  245                     default:
//  246                         {
//  247                             int i;
//  248                             for(i = 0; i < funcCount; i++)
//  249                             {
//  250                                 struct ep_info_t *ep = &funcList[i];
//  251                                 if(ep->res_available)   (*ep->res_available)(ep, ResControlPkg, MSGpkt);
//  252                             }
//  253                         }
//  254                         break;
//  255                     }               
//  256                     HalLedBlink( HAL_LED_1, 1, 50, 250 );
//  257                     break;
//  258                 }
//  259                 break;
//  260             }
//  261             // Received whenever the device changes state in the network
//  262             case ZDO_STATE_CHANGE:
//  263             {
//  264                 devStates_t st = (devStates_t)(MSGpkt->hdr.status);
??controlEpProcess_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
//  265                 if ( (st == DEV_ZB_COORD)
//  266                         || (st == DEV_ROUTER)
//  267                         || (st == DEV_END_DEVICE) )
        MOV     A,#0x9
        XRL     A,R0
        JZ      ??controlEpProcess_3
        MOV     A,#0x7
        XRL     A,R0
        JZ      ??controlEpProcess_3
        MOV     A,#0x6
        XRL     A,R0
        JNZ     ??controlEpProcess_4
//  268                 {
//  269 //                  topoBuffer->type = 0x02;
//  270                     memcpy(topoBuffer.IEEE, NLME_GetExtAddr(), 8);
??controlEpProcess_3:
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#(topoBuffer + 1) & 0xff
        MOV     R3,#((topoBuffer + 1) >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  271 #if !defined(ZDO_COORDINATOR)
//  272                     topoBuffer.PAddr = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     DPTR,#topoBuffer + 9
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  273 #else                                                             
//  274                     topoBuffer.PAddr = 0xFFFF;
//  275                     uint8 i,TxPower;
//  276                     uint16 SrcSaddr;
//  277                     uint8 *LongAddr;//物理地址
//  278                     //显示协调器的配置信息
//  279                     ClrScreen();                                               
//  280                     PutString_cn(24,0,"网络协调器");
//  281                     TxPower = TXPOWER;
//  282                     HalLcdWriteStringValue( "Send Power:",TxPower, 16, HAL_LCD_LINE_2);                                           
//  283                     SrcSaddr = NLME_GetShortAddr();
//  284                     HalLcdWriteStringValue( "Short Addr:",SrcSaddr, 16, HAL_LCD_LINE_3);
//  285                     LongAddr = NLME_GetExtAddr();  
//  286                     for(i=0;i<8;i++)
//  287                         PutAbyte(i*16,48,LongAddr[i]);                                                                                                                                                                                                
//  288                     for(i=0;i<30;i++){
//  289                         TimeDelay(60000);
//  290                     }
//  291                     ClrScreen();                                                                                               
//  292                     PutString_cn(24,0,"网络协调器");	
//  293                     PutString_cn(0,16,"---------------");	                                                
//  294                     PutString_cn(4,32,"网络已成功建立");	
//  295                     PutString_cn(4,48,"可接收节点加入");	
//  296                     
//  297 #endif
//  298                     //向协调器发送拓扑信息
//  299                     SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO));
        ; Setup parameters for call to function SendData
        MOV     ?V0 + 0,#0xb
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#topoBuffer & 0xff
        MOV     R3,#(topoBuffer >> 8) & 0xff
??controlEpProcess_5:
        MOV     R1,#-0x10
        LCALL   ??SendData?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  300                     HalLedBlink( HAL_LED_1, 1, 50, 250 );
        ; Setup parameters for call to function HalLedBlink
??controlEpProcess_6:
        MOV     R4,#-0x6
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  301                 }
//  302             }
//  303             break;
//  304             default:
//  305                 break;
//  306             }
//  307             // Release the memory
//  308             osal_msg_deallocate( (uint8 *)MSGpkt );
??controlEpProcess_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  309             // Next - if one is available
//  310             MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        MOV     R1,?V0 + 4
??controlEpProcess_1:
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??controlEpProcess_7 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??controlEpProcess_8
        ADD     A,#0x49
        JNZ     $+5
        LJMP    ??controlEpProcess_2 & 0xFFFF
        SJMP    ??controlEpProcess_4
??controlEpProcess_8:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??controlEpProcess_9
        INC     DPTR
        MOVX    A,@DPTR
??controlEpProcess_9:
        JNZ     ??controlEpProcess_4
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_80:
        MOVX    A,@DPTR
        DEC     A
        JZ      ??controlEpProcess_10
        DEC     A
        JZ      ??controlEpProcess_11
        DEC     A
        JZ      ??controlEpProcess_12
        LJMP    ??controlEpProcess_13 & 0xFFFF
??controlEpProcess_10:
        ; Setup parameters for call to function SendData
        MOV     B,#0x3
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        MUL     AB
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     DPTR,#funcTableBuffer
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
??controlEpProcess_14:
        LJMP    ??controlEpProcess_5 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 16)
??controlEpProcess_11:
        ; Setup parameters for call to function SendData
        MOV     ?V0 + 0,#0xb
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     R2,#topoBuffer & 0xff
        MOV     R3,#(topoBuffer >> 8) & 0xff
        SJMP    ??controlEpProcess_14
        CFI CFA_XSP16 add(XSP16, 16)
??controlEpProcess_12:
        MOV     R3,#0x0
        SJMP    ??controlEpProcess_15
??controlEpProcess_16:
        INC     R3
??controlEpProcess_15:
        MOV     DPTR,#funcTableBuffer
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_76:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R3
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??controlEpProcess_6 & 0xFFFF
        MOV     A,R3
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??controlEpProcess_16
        MOV     A,R3
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     DPTR,#funcTableBuffer
        MOVX    A,@DPTR
        ADD     A,R0
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??controlEpProcess_16
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {3, 0, 0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {3, 0, 0}>` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        INC     A
        ADD     A,R3
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R3
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_8:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        ; Setup parameters for call to function SendData
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LJMP    ??controlEpProcess_5 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 16)
??controlEpProcess_13:
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??controlEpProcess_17
??controlEpProcess_18:
        MOV     A,?V0 + 0
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x21
        MOV     A,?V0 + 1
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_52:
        JZ      ??controlEpProcess_19
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R1,#0x4
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_72:
        LCALL   ?CALL_IND
??controlEpProcess_19:
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??controlEpProcess_17:
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R0
        MOV     A,?V0 + 1
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_39:
        JC      ??controlEpProcess_18
        ; Setup parameters for call to function HalLedBlink
        LJMP    ??controlEpProcess_6 & 0xFFFF
//  311         }
//  312         // return unprocessed events
//  313         return (events ^ SYS_EVENT_MSG);  //返回当前任务待处理事件标志。
??controlEpProcess_7:
        MOV     R2,?V0 + 2
        MOV     A,?V0 + 3
        XRL     A,#0x80
        MOV     R3,A
        LJMP    ??controlEpProcess_20 & 0xFFFF
//  314     }
//  315     // 定时器时间到, 遍历所有端点看是否有userTimer
//  316     if(events & SAPP_SEND_PERIODIC_MSG_EVT)
??controlEpProcess_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??controlEpProcess_21
//  317     {
//  318         int i;
//  319         uint8 hasUserTimer = 0;
        MOV     ?V0 + 0,#0x0
//  320         for(i = 0; i < funcCount; i++)
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??CrossCallReturnLabel_28
//  321         {
//  322             struct ep_info_t *ep = &funcList[i];
??controlEpProcess_22:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x21
        MOV     A,R1
        LCALL   ?Subroutine21 & 0xFFFF
//  323             if(ep->userTimer && ep->res_available)
??CrossCallReturnLabel_25:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_92:
        JZ      ??controlEpProcess_23
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_53:
        JZ      ??controlEpProcess_23
//  324             {
//  325                 hasUserTimer = 1;
        MOV     ?V0 + 0,#0x1
//  326                 ep->userTimer = ep->userTimer - 1;
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_93:
        DEC     A
        MOVX    @DPTR,A
//  327                 if(ep->userTimer <= 1)
        CLR     C
        SUBB    A,#0x2
        JNC     ??controlEpProcess_23
//  328                 {
//  329                     ep->userTimer = 0;
        CLR     A
        MOVX    @DPTR,A
//  330                     (*ep->res_available)(ep, ResUserTimer, NULL);
        ; Setup parameters for indirect call
        MOV     R4,A
        MOV     R5,A
        MOV     R1,#0x3
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine44_0 & 0xFFFF
//  331                 }
//  332             }
//  333         }
??CrossCallReturnLabel_77:
        LCALL   ?CALL_IND
??controlEpProcess_23:
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JC      ??controlEpProcess_22
//  334         if(hasUserTimer)
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        JNC     ??controlEpProcess_24
//  335         {
//  336             // 重新启动定时器
//  337             osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,?V0 + 4
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??controlEpProcess_25
//  338         }
//  339         else
//  340         {
//  341             isUserTimerRunning = 0;
??controlEpProcess_24:
        MOV     DPTR,#isUserTimerRunning
        CLR     A
        MOVX    @DPTR,A
//  342             osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,A
        MOV     R1,?V0 + 4
        LCALL   ??osal_stop_timerEx?relay
//  343         }
//  344         // return unprocessed events
//  345         return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
??controlEpProcess_25:
        MOV     A,?V0 + 2
        XRL     A,#0x1
        MOV     R2,A
        MOV     R3,?V0 + 3
        SJMP    ??controlEpProcess_20
//  346     }
//  347     // Discard unknown events
//  348     return 0;
??controlEpProcess_21:
        MOV     R2,#0x0
        MOV     R3,#0x0
??controlEpProcess_20:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock137
//  349 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond138 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker141 Using cfiCommon1
        CFI (cfiPicker141) NoFunction
        CFI (cfiPicker141) Picker
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        RET
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiPicker141

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond142 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker144 Using cfiCommon1
        CFI (cfiPicker144) NoFunction
        CFI (cfiPicker144) Picker
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#funcList & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(funcList >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        RET
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiPicker144

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond145 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker148 Using cfiCommon1
        CFI (cfiPicker148) NoFunction
        CFI (cfiPicker148) Picker
        MOV     A,R6
        ADD     A,#0xf
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiPicker148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond149 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker153 Using cfiCommon1
        CFI (cfiPicker153) NoFunction
        CFI (cfiPicker153) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiPicker153
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
        CFI Block cfiCond154 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker159 Using cfiCommon1
        CFI (cfiPicker159) NoFunction
        CFI (cfiPicker159) Picker
        INC     DPTR
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiPicker159
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
        CFI Block cfiCond160 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond161) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond161) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond161) CFA_SP SP+-5
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker166 Using cfiCommon1
        CFI (cfiPicker166) NoFunction
        CFI (cfiPicker166) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiPicker166

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond167 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker169 Using cfiCommon1
        CFI (cfiPicker169) NoFunction
        CFI (cfiPicker169) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_34:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiPicker169

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond170 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_7
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+-1
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_8
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker173 Using cfiCommon1
        CFI (cfiPicker173) NoFunction
        CFI (cfiPicker173) Picker
        MOV     DPTR,#funcTableBuffer
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiPicker173

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond174 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker176 Using cfiCommon1
        CFI (cfiPicker176) NoFunction
        CFI (cfiPicker176) Picker
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R1
        INC     DPTR
        RET
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiPicker176

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond177 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_4
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_11
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_12
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker181 Using cfiCommon1
        CFI (cfiPicker181) NoFunction
        CFI (cfiPicker181) Picker
        MOV     A,R6
        ADD     A,#0x22
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiPicker181
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
        CFI Block cfiCond182 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_14
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_15
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_3
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_4
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_11
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_12
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker189 Using cfiCommon1
        CFI (cfiPicker189) NoFunction
        CFI (cfiPicker189) Picker
        MOV     DPL,A
        MOV     A,R7
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiPicker189
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
        CFI Block cfiCond190 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_92
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_93
        CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond191) CFA_SP SP+0
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_91
        CFI (cfiCond192) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond192) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond192) CFA_SP SP+-5
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_86
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_87
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_88
        CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond195) CFA_SP SP+0
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond196 Using cfiCommon0
        CFI (cfiCond196) NoFunction
        CFI (cfiCond196) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_89
        CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond196) CFA_SP SP+0
        CFI (cfiCond196) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_90
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_13
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_14
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond200 Using cfiCommon0
        CFI (cfiCond200) NoFunction
        CFI (cfiCond200) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_15
        CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond200) CFA_SP SP+0
        CFI (cfiCond200) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_3
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_4
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_11
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_12
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker205 Using cfiCommon1
        CFI (cfiPicker205) NoFunction
        CFI (cfiPicker205) Picker
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_103:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiPicker205

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond206 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker209 Using cfiCommon1
        CFI (cfiPicker209) NoFunction
        CFI (cfiPicker209) Picker
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_40:
        RET
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiPicker209
//  350 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  351 static uint16 functionEpProcess(uint8 task_id, uint16 events)  //节点接收数据处理
functionEpProcess:
        CFI Block cfiBlock210 Using cfiCommon0
        CFI Function functionEpProcess
        CODE
//  352 {
        FUNCALL functionEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, SampleApp_MessageMSGCB2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  353     afIncomingMSGPacket_t *MSGpkt;
//  354     if(events & SYS_EVENT_MSG)
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??functionEpProcess_0 & 0xFFFF
//  355     {
//  356         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??functionEpProcess_1
//  357         while ( MSGpkt )
//  358         {
//  359           switch ( MSGpkt->hdr.event )
//  360           {
//  361             // 接收到数据包
//  362           case AF_INCOMING_MSG_CMD: 
//  363             HalLedBlink( HAL_LED_1, 1, 50, 250 );
//  364             //点对点及广播实验                
//  365        /*     {
//  366               switch ( MSGpkt->clusterId )
//  367               {
//  368               case SAPP_PERIODIC_CLUSTERID:
//  369                 if(MSGpkt->endPoint <= funcCount)
//  370                 {
//  371                   struct ep_info_t *ep = &funcList[MSGpkt->endPoint - 1];
//  372                   if(ep->incoming_data)
//  373                     (*ep->incoming_data)(ep, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, &MSGpkt->cmd);
//  374                 }
//  375                 break;
//  376               }*/
//  377 #if defined(ZDO_COORDINATOR)
//  378              //HalUARTWrite(HAL_UART_PORT_0, "get3", 4); 
//  379              SampleApp_MessageMSGCB( MSGpkt );
//  380               break;
//  381 #else 
//  382               SampleApp_MessageMSGCB2( MSGpkt );
//  383               break;
//  384 #endif
//  385 
//  386             case ZDO_STATE_CHANGE:
//  387                 {
//  388                     curNwkState = (devStates_t)(MSGpkt->hdr.status);
//  389                     if ( (curNwkState == DEV_ZB_COORD)
//  390                             || (curNwkState == DEV_ROUTER)
//  391                             || (curNwkState == DEV_END_DEVICE) )
//  392                     {
//  393                         int i;
//  394                         int hasTimeOut = 0;
//  395                         for(i = 0; i < funcCount; i++)
//  396                         {
//  397                             struct ep_info_t *ep = &funcList[i];
//  398                             if(ep->nwk_stat_change)
//  399                                 (*ep->nwk_stat_change)(ep);
//  400                             // 重置端点计数器
//  401                             if(ep->time_out && ep->function.cycle)
//  402                             {
//  403                                 ep->timerTick = ep->function.cycle;
//  404                                 hasTimeOut = 1;
//  405                             }
//  406                         }
//  407                         if(hasTimeOut)
//  408                         {
//  409                             // 加入网络成功,启动定时器,为各个端点提供定时
//  410                             osal_start_timerEx(task_id,
//  411                                                SAPP_SEND_PERIODIC_MSG_EVT,
//  412                                                1000);
//  413                         }
//  414                     }
//  415                     else
//  416                         osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
??functionEpProcess_2:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,?V0 + 0
        LCALL   ??osal_stop_timerEx?relay
//  417                 }
//  418                 break;
//  419             default:
//  420                 break;
//  421             }
//  422             // Release the memory
//  423             osal_msg_deallocate( (uint8 *)MSGpkt );
??functionEpProcess_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??osal_msg_deallocate?relay
//  424             // Next - if one is available
//  425             MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        MOV     R1,?V0 + 0
??functionEpProcess_1:
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     A,?V0 + 6
        ORL     A,?V0 + 7
        JNZ     $+5
        LJMP    ??functionEpProcess_4 & 0xFFFF
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??functionEpProcess_5
        ADD     A,#0x49
        JZ      ??functionEpProcess_6
        SJMP    ??functionEpProcess_3
??functionEpProcess_5:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x6
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
        ; Setup parameters for call to function SampleApp_MessageMSGCB2
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??SampleApp_MessageMSGCB2?relay
        SJMP    ??functionEpProcess_3
??functionEpProcess_6:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#curNwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??functionEpProcess_7
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??functionEpProcess_7
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??functionEpProcess_2
??functionEpProcess_7:
        MOV     ?V0 + 4,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        SJMP    ??CrossCallReturnLabel_29
??functionEpProcess_8:
        MOV     A,?V0 + 2
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x21
        MOV     A,?V0 + 3
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     ?V0 + 8,A
        MOV     A,#(funcList >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 9,A
        MOV     DPL,?V0 + 8
        MOV     DPH,A
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_46:
        JZ      ??functionEpProcess_9
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine45_0 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL   ?CALL_IND
??functionEpProcess_9:
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        LCALL   ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_49:
        JZ      ??functionEpProcess_10
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??functionEpProcess_10
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 8
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,?V0 + 9
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_55:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V0 + 4,#0x1
??functionEpProcess_10:
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        JC      ??functionEpProcess_8
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??functionEpProcess_3 & 0xFFFF
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,?V0 + 0
        LCALL   ??osal_start_timerEx?relay
        LJMP    ??functionEpProcess_3 & 0xFFFF
//  426         }
//  427         // return unprocessed events
//  428         return (events ^ SYS_EVENT_MSG);
??functionEpProcess_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??functionEpProcess_11:
        MOV     R3,A
        LJMP    ??functionEpProcess_12 & 0xFFFF
//  429     }
//  430 
//  431     // 定时器时间到, 遍历所有端点看是否有需要调用time_out
//  432     if(events & SAPP_SEND_PERIODIC_MSG_EVT)
??functionEpProcess_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??functionEpProcess_13 & 0xFFFF
//  433     {
//  434         int i;
//  435         for(i = 0; i < funcCount; i++)
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        SJMP    ??CrossCallReturnLabel_30
//  436         {
//  437             struct ep_info_t *ep = &funcList[i];
??functionEpProcess_14:
        MOV     A,?V0 + 2
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x21
        MOV     A,?V0 + 3
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     ?V0 + 4,A
        MOV     A,#(funcList >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 5,A
//  438             if(ep->time_out && ep->function.cycle)
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        LCALL   ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_50:
        JZ      ??functionEpProcess_15
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??functionEpProcess_15
//  439             {
//  440                 // 端点需要周期执行
//  441                 ep->timerTick = ep->timerTick - 1;
        MOV     A,?V0 + 4
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,?V0 + 5
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_86:
        DEC     A
        MOVX    @DPTR,A
//  442                 if(ep->timerTick == 0)
        JNZ     ??functionEpProcess_15
//  443                 {
//  444                   // 定时时间到,执行time_out函数
//  445                   (*ep->time_out)(ep);
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL   ?CALL_IND
//  446                   ep->timerTick = ep->function.cycle;
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 4
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,?V0 + 5
        LCALL   ??Subroutine38_0 & 0xFFFF
//  447                 }
//  448             }
//  449 #if 0
//  450             if(ep->userTimer && ep->res_available)
//  451             {
//  452                 ep->userTimer = ep->userTimer - 1;
//  453                 if(ep->userTimer <= 1)
//  454                 {
//  455                     (*ep->res_available)(ep, ResUserTimer, NULL);
//  456                     ep->userTimer = 0;
//  457                 }
//  458             }
//  459 #endif
//  460         }
??CrossCallReturnLabel_56:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
??functionEpProcess_15:
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        JC      ??functionEpProcess_14
//  461         // 重新启动定时器
//  462         osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,?V0 + 0
        LCALL   ??osal_start_timerEx?relay
//  463         // return unprocessed events
//  464         return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        LJMP    ??functionEpProcess_11 & 0xFFFF
//  465     }
//  466     // Discard unknown events
//  467     return 0;
??functionEpProcess_13:
        MOV     R2,#0x0
        MOV     R3,#0x0
??functionEpProcess_12:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock210
//  468 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond211 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond212) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond212) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond212) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond212) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond212) CFA_SP SP+0
        CFI (cfiCond212) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker213 Using cfiCommon1
        CFI (cfiPicker213) NoFunction
        CFI (cfiPicker213) Picker
        MOV     A,?V0 + 2
        ADD     A,#0x1
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiPicker213

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond214 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond215 Using cfiCommon0
        CFI (cfiCond215) NoFunction
        CFI (cfiCond215) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond215) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond215) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond215) CFA_SP SP+0
        CFI (cfiCond215) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker216 Using cfiCommon1
        CFI (cfiPicker216) NoFunction
        CFI (cfiPicker216) Picker
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R0
        MOV     A,?V0 + 3
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_41:
        RET
        CFI EndBlock cfiCond214
        CFI EndBlock cfiCond215
        CFI EndBlock cfiPicker216

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond217 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond218 Using cfiCommon0
        CFI (cfiCond218) NoFunction
        CFI (cfiCond218) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_0
        CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond218) CFA_SP SP+0
        CFI (cfiCond218) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_1
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_2
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond221 Using cfiCommon0
        CFI (cfiCond221) NoFunction
        CFI (cfiCond221) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_5
        CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond221) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond221) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond221) CFA_SP SP+0
        CFI (cfiCond221) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_6
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker223 Using cfiCommon1
        CFI (cfiPicker223) NoFunction
        CFI (cfiPicker223) Picker
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond217
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiPicker223

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond224 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+0
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker226 Using cfiCommon1
        CFI (cfiPicker226) NoFunction
        CFI (cfiPicker226) Picker
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine39_0 & 0xFFFF
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiPicker226
??CrossCallReturnLabel_98:
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
        CFI Block cfiCond227 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond228) CFA_SP SP+-1
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+0
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond234 Using cfiCommon0
        CFI (cfiCond234) NoFunction
        CFI (cfiCond234) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond234) CFA_SP SP+0
        CFI (cfiCond234) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker235 Using cfiCommon1
        CFI (cfiPicker235) NoFunction
        CFI (cfiPicker235) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiCond234
        CFI EndBlock cfiPicker235
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine45_0:
        CFI Block cfiCond236 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond240) CFA_SP SP+-1
        CFI (cfiCond240) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond241) CFA_SP SP+0
        CFI (cfiCond241) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond243 Using cfiCommon0
        CFI (cfiCond243) NoFunction
        CFI (cfiCond243) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond243) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond243) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond243) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond243) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond243) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond243) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond243) CFA_SP SP+0
        CFI (cfiCond243) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond244 Using cfiCommon0
        CFI (cfiCond244) NoFunction
        CFI (cfiCond244) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond244) CFA_SP SP+0
        CFI (cfiCond244) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker247 Using cfiCommon1
        CFI (cfiPicker247) NoFunction
        CFI (cfiPicker247) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiCond243
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiPicker247
//  469 
//  470 //#if defined(ZDO_COORDINATOR)
//  471 #if defined(ZDO_COORDINATOR) || defined(PEER_ROUTER) || defined(PEER_COORD)
//  472 #if defined(ZDO_COORDINATOR)
//  473     uint8 SendBuf[10];
//  474 #endif
//  475 static uint8 uartMsgProcesser(uint8 *msg)
//  476 {
//  477     mtOSALSerialData_t *pMsg = (mtOSALSerialData_t *)msg;
//  478     mtUserSerialMsg_t *pMsgBody = (mtUserSerialMsg_t *)pMsg->msg;
//  479     if ( (curNwkState != DEV_ZB_COORD)
//  480             && (curNwkState != DEV_ROUTER)
//  481             && (curNwkState != DEV_END_DEVICE) )
//  482         return 1;   
//  483 #if defined(PEER_COORD)
//  484     SendData(CONTROL_ENDPOINT, &msg[4],SrcShortAddr, TRANSFER_ENDPOINT,8);    
//  485     return 1;
//  486 #endif
//  487 
//  488 #if defined(PEER_ROUTER)
//  489     SendData(CONTROL_ENDPOINT, &msg[4],0x0000, TRANSFER_ENDPOINT,8);
//  490     return 1;
//  491 #endif        
//  492     switch(pMsgBody->cmd)
//  493     {
//  494         case 0x46B9:
//  495         {                  
//  496             switch(pMsgBody->cmdEndPoint)
//  497             {
//  498             case 0xF1:
//  499                 {                                 
//  500                     // 转发数据                    
//  501                     /*SendData(TRANSFER_ENDPOINT, pMsgBody->data,
//  502                              pMsgBody->addr, pMsgBody->endPoint,
//  503                              pMsgBody->len - 6);
//  504                     */
//  505                     SendData(TRANSFER_ENDPOINT, pMsgBody->data,
//  506                              0XFFFF, pMsgBody->endPoint,
//  507                              pMsgBody->len - 6);
//  508                 }
//  509                 break;
//  510 #if defined(ZDO_COORDINATOR)                
//  511             case 0xF0:
//  512                 HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  513                 HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  514                 Delay100us(5000);                
//  515                 HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  516                 HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
//  517                 Delay100us(5000);                
//  518                 HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  519                 HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );                
//  520                 SystemReset();  
//  521                 break;
//  522             case 0xEF:   
//  523                 SendBuf[0]=0x2;
//  524                 SendBuf[1]=0x7;
//  525                 SendBuf[2]=0xB9;
//  526                 SendBuf[3]=0x46;
//  527                 SendBuf[4]=0xEF;
//  528                 SendBuf[5]=0x0;
//  529                 SendBuf[6]=0x0;
//  530                 SendBuf[7]=0x0;
//  531                 SendBuf[8]=0x0;
//  532                 SendBuf[9]=0x17;
//  533                 HalUARTWrite(HAL_UART_PORT_0, &SendBuf[0], 10);    
//  534                 break;
//  535 #endif                
//  536             }            
//  537         }
//  538         break;
//  539     }
//  540     return 1;
//  541 }
//  542 #endif
//  543 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  544 uint8 SendData(uint8 srcEP, const void *buf, uint16 addr, uint8 dstEP, uint8 Len)
SendData:
        CFI Block cfiBlock248 Using cfiCommon0
        CFI Function SendData
        CODE
//  545 {
        FUNCALL SendData, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        MOV     R6,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R7,A
//  546     static uint8 transID = 0;
//  547     afAddrType_t SendDataAddr;
//  548     struct ep_info_t *epInfo;
//  549 
//  550     if(srcEP <= funcCount)
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        JC      ??SendData_0
//  551         epInfo = &funcList[srcEP - 1];
        MOV     A,R6
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(funcList + 223) & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#((funcList - 33) >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        SJMP    ??SendData_1
//  552     else
//  553         epInfo = &controlEndPointInfo;
??SendData_0:
        MOV     R2,#controlEndPointInfo & 0xff
        MOV     R3,#(controlEndPointInfo >> 8) & 0xff
//  554 
//  555     SendDataAddr.addrMode = (afAddrMode_t)Addr16Bit;         //短地址发送
??SendData_1:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  556     SendDataAddr.endPoint = dstEP;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  557     SendDataAddr.addr.shortAddr = addr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  558     if ( AF_DataRequest( &SendDataAddr, //发送的地址和模式
//  559                          // TODO:
//  560                          &epInfo->SampleApp_epDesc,   //终端（比如操作系统中任务ID等）
//  561                          SAPP_PERIODIC_CLUSTERID,//发送串ID
//  562                          Len,
//  563                          (uint8*)buf,
//  564                          &transID,  //信息ID（操作系统参数）
//  565                          AF_DISCV_ROUTE,                         
//  566                          AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 2,#??transID & 0xff
        MOV     ?V0 + 3,#(??transID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,R7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     R1,#0x20
        MOV     A,R2
        ADD     A,#0xf
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        JNZ     ??SendData_2
//  567     {       
//  568         HalLedBlink( HAL_LED_1, 1, 50, 250 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x6
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  569         return 1;
        MOV     R1,#0x1
        SJMP    ??SendData_3
//  570     }
//  571     else
//  572     {
//  573         return 0;
??SendData_2:
        MOV     R1,#0x0
??SendData_3:
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock248
//  574     }
//  575 }

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??transID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  576 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  577 void CreateUserTimer(struct ep_info_t *ep, uint8 seconds)
CreateUserTimer:
        CFI Block cfiBlock249 Using cfiCommon0
        CFI Function CreateUserTimer
        CODE
//  578 {
        FUNCALL CreateUserTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  579     if(ep == NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??CreateUserTimer_0
//  580         return;
//  581     if(ep->res_available == NULL)
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_54:
        JZ      ??CreateUserTimer_0
//  582         return;
//  583     ep->userTimer = seconds;
        MOV     A,R2
        ADD     A,#0xe
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV     A,R6
        MOVX    @DPTR,A
//  584     if(isUserTimerRunning == 0)
        MOV     DPTR,#isUserTimerRunning
        MOVX    A,@DPTR
        JNZ     ??CreateUserTimer_0
//  585     {
//  586         osal_start_timerEx(controlTaskId,
//  587                            SAPP_SEND_PERIODIC_MSG_EVT,
//  588                            1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#controlTaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  589         isUserTimerRunning = 1;
        MOV     DPTR,#isUserTimerRunning
        MOV     A,#0x1
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock249
//  590     }
??CreateUserTimer_0:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  591 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock250 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock250
//  592 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  593 void DeleteUserTimer(struct ep_info_t *ep)
DeleteUserTimer:
        CFI Block cfiBlock251 Using cfiCommon0
        CFI Function DeleteUserTimer
        CODE
//  594 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  595     if(ep == NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_85
//  596         return;
//  597     ep->userTimer = 0;
        LCALL   ?Subroutine15 & 0xFFFF
//  598 }
??CrossCallReturnLabel_85:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock251

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond252 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond253 Using cfiCommon0
        CFI (cfiCond253) NoFunction
        CFI (cfiCond253) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond253) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond253) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond253) CFA_SP SP+-5
        CFI Block cfiPicker254 Using cfiCommon1
        CFI (cfiPicker254) NoFunction
        CFI (cfiPicker254) Picker
        MOV     A,R2
        ADD     A,#0xe
        CFI EndBlock cfiCond252
        CFI EndBlock cfiCond253
        CFI EndBlock cfiPicker254
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine46_0:
        CFI Block cfiCond255 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_82
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond256 Using cfiCommon0
        CFI (cfiCond256) NoFunction
        CFI (cfiCond256) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond256) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond256) CFA_SP SP+0
        CFI (cfiCond256) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond257 Using cfiCommon0
        CFI (cfiCond257) NoFunction
        CFI (cfiCond257) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond257) CFA_SP SP+0
        CFI (cfiCond257) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond258 Using cfiCommon0
        CFI (cfiCond258) NoFunction
        CFI (cfiCond258) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond258) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond258) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond258) CFA_SP SP+-5
        CFI Block cfiPicker259 Using cfiCommon1
        CFI (cfiPicker259) NoFunction
        CFI (cfiPicker259) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_102:
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond255
        CFI EndBlock cfiCond256
        CFI EndBlock cfiCond257
        CFI EndBlock cfiCond258
        CFI EndBlock cfiPicker259
//  599 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  600 void ModifyRefreshCycle(struct ep_info_t *ep, uint8 seconds)
ModifyRefreshCycle:
        CFI Block cfiBlock260 Using cfiCommon0
        CFI Function ModifyRefreshCycle
        CODE
//  601 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  602     if(ep == NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??ModifyRefreshCycle_0
//  603         return;
//  604     if(ep->time_out == NULL)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     A,R4
        ORL     A,R5
        JZ      ??ModifyRefreshCycle_0
//  605         return;
//  606     ep->function.cycle = seconds;
        MOV     A,R1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  607     if(ep->timerTick > seconds)
        MOV     A,R2
        ADD     A,#0xd
        LCALL   ??Subroutine47_0 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     R0,A
        MOV     A,R1
        CLR     C
        SUBB    A,R0
        JNC     ??ModifyRefreshCycle_0
//  608         ep->timerTick = seconds;
        MOV     A,R1
        MOVX    @DPTR,A
??ModifyRefreshCycle_0:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock260
//  609 }
//  610 
//  611 #if ! defined(ZDO_COORDINATOR) && defined(RTR_NWK) && !defined(PEER_ROUTER)

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  612 void RouterTimeoutRoutine(struct ep_info_t *ep)
RouterTimeoutRoutine:
        CFI Block cfiBlock261 Using cfiCommon0
        CFI Function RouterTimeoutRoutine
        CODE
//  613 {    
        FUNCALL RouterTimeoutRoutine, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  614     SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO)); //路由节点向协调器发送拓扑信息      
        ; Setup parameters for call to function SendData
        MOV     ?V0 + 0,#0xb
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#topoBuffer & 0xff
        MOV     R3,#(topoBuffer >> 8) & 0xff
        MOV     R1,#-0x10
        LCALL   ??SendData?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
//  615 }
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock261
//  616 #elif defined(PEER_ROUTER)
//  617 void RouterTimeoutRoutine(struct ep_info_t *ep)
//  618 {
//  619 }  
//  620 #endif
//  621 
//  622 #if defined(ZDO_COORDINATOR)
//  623 void CoordinatorIncomingRoutine(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)
//  624 {
//  625     //msg->Data[], msg->DataLength, msg->TransSeqNumber
//  626     //转发数据到串口  
//  627     if(msg->DataLength > 0)
//  628     {
//  629         mtUserSerialMsg_t *pMsg = osal_mem_alloc(sizeof(mtUserSerialMsg_t) + msg->DataLength - 1);
//  630         pMsg->sop = MT_UART_SOF;
//  631         pMsg->len = msg->DataLength + 6;
//  632         pMsg->cmd = 0x46B9;
//  633         pMsg->cmdEndPoint = 0xF1;
//  634         pMsg->addr = addr;
//  635         SrcShortAddr = addr;//PeerToPeer时使用
//  636         pMsg->endPoint = endPoint;
//  637         if((endPoint == 0xF0)&&(addr !=0)){//为路由包且不为网关路由包
//  638             ClrScreen();                        
//  639             PutString_cn(24,0,"网络协调器");
//  640             PutString_cn(0,16,"---------------");
//  641             PutString_cn(4,32,"新节点加入");
//  642             HalLcdWriteStringValue( "Short Addr:",addr, 16, HAL_LCD_LINE_4);                                 
//  643         }                  
//  644         memcpy(pMsg->data, msg->Data, msg->DataLength);
//  645         pMsg->fsc = MT_UartCalcFCS(0, &pMsg->len, 1);
//  646         pMsg->fsc = MT_UartCalcFCS(pMsg->fsc, pMsg->dataBody, pMsg->len);
//  647         #if (defined(PEER_COORD)||(PEER_ROUTER))//简单无线收发实验
//  648         HalUARTWrite(HAL_UART_PORT_0, &pMsg->data[0], 1);        
//  649         #else
//  650         HalUARTWrite(HAL_UART_PORT_0, &pMsg->sop, sizeof(mtUserSerialMsg_t) - 2 + msg->DataLength);    
//  651         Delay100us(20);  
//  652         HalUARTWrite(HAL_UART_PORT_0, &pMsg->fsc, 1);
//  653         #endif
//  654         osal_mem_free(pMsg);
//  655     }
//  656 }
//  657 #elif defined(RTR_NWK) || defined(PEER_ROUTER) || defined(LIGHT)
//  658 #ifdef LIGHT

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  659 uint8 SegValue = 0;
SegValue:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  660 bool MotorValue = 0;
MotorValue:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  661 extern const unsigned char seg7table[16];
//  662 #endif

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  663 void RouterIncomingRoutine(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)
RouterIncomingRoutine:
        CFI Block cfiBlock262 Using cfiCommon0
        CFI Function RouterIncomingRoutine
        CODE
//  664 {
        FUNCALL RouterIncomingRoutine, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, Sensor_PIN_INT
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, Sensor_PIN_INT
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     ?V0 + 10,R1
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  665     //msg->Data[], msg->DataLength, msg->TransSeqNumber
//  666     // 转发数据到串口       
//  667     if(msg->DataLength > 0)
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_47:
        JNZ     $+5
        LJMP    ??RouterIncomingRoutine_0 & 0xFFFF
//  668     {                       
//  669         mtUserSerialMsg_t *pMsg = osal_mem_alloc(sizeof(mtUserSerialMsg_t) + msg->DataLength - 1);
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        ; Setup parameters for call to function osal_mem_alloc
        MOVX    A,@DPTR
        ADD     A,#0x9
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  670         pMsg->sop = MT_UART_SOF;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     A,#0x2
        MOVX    @DPTR,A
//  671         pMsg->len = msg->DataLength + 6;
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        ADD     A,#0x6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
//  672         pMsg->cmd = 0x46B9;
        MOV     A,R6
        ADD     A,#0x3
        MOV     ?V0 + 8,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
        MOV     DPL,?V0 + 8
        MOV     DPH,A
        MOV     A,#-0x47
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x46
        LCALL   ?Subroutine29 & 0xFFFF
//  673         pMsg->cmdEndPoint = 0xF1;
??CrossCallReturnLabel_37:
        MOV     A,#-0xf
        LCALL   ?Subroutine20 & 0xFFFF
//  674         pMsg->addr = addr;
??CrossCallReturnLabel_22:
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
//  675         SrcShortAddr = addr;//PeerToPeer时使用
        MOV     DPTR,#SrcShortAddr
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        LCALL   ?Subroutine20 & 0xFFFF
//  676         pMsg->endPoint = endPoint;                
??CrossCallReturnLabel_23:
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 10
        MOVX    @DPTR,A
//  677         memcpy(pMsg->data, msg->Data, msg->DataLength);
        ; Setup parameters for call to function memcpy
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     A,R6
        ADD     A,#0x9
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  678         pMsg->fsc = MT_UartCalcFCS(0, &pMsg->len, 1);
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     R4,#0x1
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,#0x0
        LCALL   ?Subroutine25 & 0xFFFF
//  679         pMsg->fsc = MT_UartCalcFCS(pMsg->fsc, pMsg->dataBody, pMsg->len);
??CrossCallReturnLabel_31:
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ?Subroutine25 & 0xFFFF
//  680         #if defined(PEER_ROUTER)//简单无线收发实验
//  681         HalUARTWrite(HAL_UART_PORT_0, &pMsg->data[0], 1);        
//  682         #elif  defined(LIGHT)//点对点或广播通信实验      
//  683         HalUARTWrite(HAL_UART_PORT_0, &pMsg->data[0], 1);
??CrossCallReturnLabel_32:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x9
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  684         //数码管控制
//  685         Sensor_PIN_INT(7);
        ; Setup parameters for call to function Sensor_PIN_INT
        MOV     R1,#0x7
        LCALL   ??Sensor_PIN_INT?relay
//  686         P0 |= (0x1<<4);  
        SETB    0x80.4
//  687         SegValue++;
        MOV     DPTR,#SegValue
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  688         if(SegValue>0xf) SegValue=0;      
        CLR     C
        SUBB    A,#0x10
        JC      ??RouterIncomingRoutine_1
        CLR     A
        MOVX    @DPTR,A
//  689         P1 =  seg7table[SegValue];
??RouterIncomingRoutine_1:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#seg7table & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(seg7table >> 8) & 0xff
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV     0x90,A
//  690         P0 &= ~(0x1<<4); 
        CLR     0x80.4
//  691         
//  692         Sensor_PIN_INT(6);
        ; Setup parameters for call to function Sensor_PIN_INT
        MOV     R1,#0x6
        LCALL   ??Sensor_PIN_INT?relay
//  693        MotorValue = !MotorValue;
        MOV     DPTR,#MotorValue
        MOVX    A,@DPTR
        JNZ     ??RouterIncomingRoutine_2
        MOV     A,#0x1
        SJMP    ??RouterIncomingRoutine_3
??RouterIncomingRoutine_2:
        CLR     A
??RouterIncomingRoutine_3:
        MOVX    @DPTR,A
//  694         if(MotorValue == 0)//模拟电机停止
        MOV     C,0xE0 /* A   */.0
        JC      ??RouterIncomingRoutine_4
//  695             P0 &= (~(0x1 << 6));
        CLR     0x80.6
//  696 
//  697         if(MotorValue == 1)//模拟电机启动
??RouterIncomingRoutine_4:
        MOV     C,0xE0 /* A   */.0
        JNC     ??RouterIncomingRoutine_5
//  698             P0 |= (0x1 << 6);            
        SETB    0x80.6
//  699         #else
//  700         HalUARTWrite(HAL_UART_PORT_0, &pMsg->sop, sizeof(mtUserSerialMsg_t) - 2 + msg->DataLength);       
//  701         Delay100us(20);
//  702         HalUARTWrite(HAL_UART_PORT_0, &pMsg->fsc, 1);
//  703         #endif
//  704         osal_mem_free(pMsg);
??RouterIncomingRoutine_5:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  705     }
//  706 }
??RouterIncomingRoutine_0:
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock262
        REQUIRE _A_P0
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond263 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond264 Using cfiCommon0
        CFI (cfiCond264) NoFunction
        CFI (cfiCond264) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond264) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond264) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond264) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond264) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond264) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond264) CFA_SP SP+0
        CFI (cfiCond264) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker265 Using cfiCommon1
        CFI (cfiPicker265) NoFunction
        CFI (cfiPicker265) Picker
        LCALL   ??MT_UartCalcFCS?relay
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond263
        CFI EndBlock cfiCond264
        CFI EndBlock cfiPicker265

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond266 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond267 Using cfiCommon0
        CFI (cfiCond267) NoFunction
        CFI (cfiCond267) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond267) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond267) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond267) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond267) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond267) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond267) CFA_SP SP+0
        CFI (cfiCond267) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker268 Using cfiCommon1
        CFI (cfiPicker268) NoFunction
        CFI (cfiPicker268) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_38:
        INC     DPTR
        RET
        CFI EndBlock cfiCond266
        CFI EndBlock cfiCond267
        CFI EndBlock cfiPicker268

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond269 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond270 Using cfiCommon0
        CFI (cfiCond270) NoFunction
        CFI (cfiCond270) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_22
        CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond270) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond270) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond270) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond270) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond270) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond270) CFA_SP SP+0
        CFI (cfiCond270) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond271 Using cfiCommon0
        CFI (cfiCond271) NoFunction
        CFI (cfiCond271) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_23
        CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond271) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond271) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond271) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond271) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond271) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond271) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond271) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond271) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond271) CFA_SP SP+0
        CFI (cfiCond271) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker272 Using cfiCommon1
        CFI (cfiPicker272) NoFunction
        CFI (cfiPicker272) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond269
        CFI EndBlock cfiCond270
        CFI EndBlock cfiCond271
        CFI EndBlock cfiPicker272
//  707 #endif
//  708 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  709 void Delay100us(uint16 Num)
Delay100us:
        CFI Block cfiBlock273 Using cfiCommon0
        CFI Function Delay100us
        CODE
//  710 {
        ; Saved register size: 0
        ; Auto size: 0
//  711   uint16 i;
//  712   uint8 j;
//  713   for(i=0;i<Num;i++){  
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??Delay100us_0
//  714     for(j=0;j<120;j++){
??Delay100us_1:
        MOV     A,#0x78
//  715       asm("NOP");
??Delay100us_2:
        NOP
//  716       asm("NOP");
        NOP
//  717       asm("NOP");
        NOP
//  718       asm("NOP");
        NOP
//  719       asm("NOP");
        NOP
//  720       asm("NOP");
        NOP
//  721       asm("NOP");
        NOP
//  722       asm("NOP");
        NOP
//  723       asm("NOP");
        NOP
//  724       asm("NOP");
        NOP
//  725     }
        DEC     A
        JNZ     ??Delay100us_2
//  726   }    
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??Delay100us_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??Delay100us_1
//  727 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock273
//  728 
//  729 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  730 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock274 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  731 {
        FUNCALL SampleApp_MessageMSGCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        LCALL   ?Subroutine12 & 0xFFFF
//  732  // unsigned char buf[3]; 
//  733   uint8 RCbf[3];
//  734   osal_memset(RCbf, 0 , 3);
//  735   osal_memcpy(RCbf, pckt->cmd.Data, 3);
??CrossCallReturnLabel_11:
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  736   
//  737   switch ( pckt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_MessageMSGCB_0:
        JNZ     ??SampleApp_MessageMSGCB_1
//  738   {
//  739   case SAPP_PERIODIC_CLUSTERID:
//  740     if(pckt->endPoint <= funcCount)
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV     R0,A
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JC      ??SampleApp_MessageMSGCB_1
//  741     {
//  742       struct ep_info_t *ep = &funcList[pckt->endPoint - 1];
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(funcList + 223) & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#((funcList - 33) >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
//  743       if(ep->incoming_data)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_48:
        JZ      ??SampleApp_MessageMSGCB_1
//  744         (*ep->incoming_data)(ep, pckt->srcAddr.addr.shortAddr, pckt->srcAddr.endPoint, &pckt->cmd);
        ; Setup parameters for indirect call
        MOV     A,R6
        ADD     A,#0x1f
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine48_0 & 0xFFFF
//  745     }
//  746     break;
//  747   }
??CrossCallReturnLabel_90:
        MOV     R1,A
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL   ?CALL_IND
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        CFI EndBlock cfiBlock274
//  748 }
??SampleApp_MessageMSGCB_1:
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock275 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock275

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond276 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_92
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond277) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond277) CFA_SP SP+0
        CFI (cfiCond277) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker278 Using cfiCommon1
        CFI (cfiPicker278) NoFunction
        CFI (cfiPicker278) Picker
        MOV     A,R2
        ADD     A,#0xe
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiPicker278
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine47_0:
        CFI Block cfiCond279 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond280 Using cfiCommon0
        CFI (cfiCond280) NoFunction
        CFI (cfiCond280) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond280) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond280) CFA_SP SP+0
        CFI (cfiCond280) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond281 Using cfiCommon0
        CFI (cfiCond281) NoFunction
        CFI (cfiCond281) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond281) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond281) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond281) CFA_SP SP+0
        CFI (cfiCond281) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker282 Using cfiCommon1
        CFI (cfiPicker282) NoFunction
        CFI (cfiPicker282) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond279
        CFI EndBlock cfiCond280
        CFI EndBlock cfiCond281
        CFI EndBlock cfiPicker282
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine48_0:
        CFI Block cfiCond283 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_86
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond284 Using cfiCommon0
        CFI (cfiCond284) NoFunction
        CFI (cfiCond284) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond284) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond284) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond284) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond284) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond284) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond284) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond284) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond284) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond284) CFA_SP SP+0
        CFI (cfiCond284) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond285 Using cfiCommon0
        CFI (cfiCond285) NoFunction
        CFI (cfiCond285) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond285) CFA_SP SP+0
        CFI (cfiCond285) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond286 Using cfiCommon0
        CFI (cfiCond286) NoFunction
        CFI (cfiCond286) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond286) CFA_SP SP+0
        CFI (cfiCond286) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond287 Using cfiCommon0
        CFI (cfiCond287) NoFunction
        CFI (cfiCond287) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond287) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond287) CFA_SP SP+0
        CFI (cfiCond287) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond288 Using cfiCommon0
        CFI (cfiCond288) NoFunction
        CFI (cfiCond288) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond288) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond288) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond288) CFA_SP SP+-5
        CFI Block cfiCond289 Using cfiCommon0
        CFI (cfiCond289) NoFunction
        CFI (cfiCond289) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond289) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond289) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond289) CFA_SP SP+0
        CFI (cfiCond289) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond290 Using cfiCommon0
        CFI (cfiCond290) NoFunction
        CFI (cfiCond290) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond290) CFA_SP SP+0
        CFI (cfiCond290) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker291 Using cfiCommon1
        CFI (cfiPicker291) NoFunction
        CFI (cfiPicker291) Picker
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_97:
        RET
        CFI EndBlock cfiCond283
        CFI EndBlock cfiCond284
        CFI EndBlock cfiCond285
        CFI EndBlock cfiCond286
        CFI EndBlock cfiCond287
        CFI EndBlock cfiCond288
        CFI EndBlock cfiCond289
        CFI EndBlock cfiCond290
        CFI EndBlock cfiPicker291
//  749 
//  750 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  751 void SampleApp_MessageMSGCB2( afIncomingMSGPacket_t *pckt )
SampleApp_MessageMSGCB2:
        CFI Block cfiBlock292 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB2
        CODE
//  752 {
        FUNCALL SampleApp_MessageMSGCB2, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB2, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        LCALL   ?Subroutine12 & 0xFFFF
//  753  // unsigned char buf[3]; 
//  754   uint8 RCbf[3];
//  755   osal_memset(RCbf, 0 , 3);
//  756   osal_memcpy(RCbf, pckt->cmd.Data, 3);
??CrossCallReturnLabel_12:
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  757   
//  758   switch ( pckt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_MessageMSGCB2_0
        INC     DPTR
        MOVX    A,@DPTR
??SampleApp_MessageMSGCB2_0:
        JNZ     ??SampleApp_MessageMSGCB2_1
//  759   {
//  760        case SAPP_PERIODIC_CLUSTERID:
//  761         /*LED灯 & 风扇*/
//  762         switch(pckt->cmd.Data[0])
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_81:
        MOVX    A,@DPTR
        ADD     A,#-0x42
        JZ      ??SampleApp_MessageMSGCB2_2
        ADD     A,#-0x5
        JZ      ??SampleApp_MessageMSGCB2_3
        ADD     A,#-0x5
        JZ      ??SampleApp_MessageMSGCB2_4
        ADD     A,#-0xb
        JZ      ??SampleApp_MessageMSGCB2_5
        SJMP    ??SampleApp_MessageMSGCB2_1
//  763         {  
//  764            // case 'S':                                         //风扇
//  765                 /*if(pckt->endPoint <= funcCount)
//  766                         {
//  767                             struct ep_info_t *ep = &funcList[pckt->endPoint - 1];
//  768                             if(ep->incoming_data)
//  769                                 (*ep->incoming_data)(ep, pckt->srcAddr.addr.shortAddr, pckt->srcAddr.endPoint, &pckt->cmd);
//  770                         }*/
//  771              // P0_6 = ~P0_6;//停止直流电机
//  772              //   break;
//  773                 
//  774                 case'L':
//  775                   P0DIR = (0x01<<0)|(0x01<<4)|(0x01<<5)|(0x01<<6|(0x01<<7));  // 设置P0_0,P0_4,P0_5,P06,P0_7 为输出方式 
??SampleApp_MessageMSGCB2_4:
        MOV     0xfd,#-0xf
//  776                   P1DIR = 0xff;  // 设置 P1 为输出方式 
        MOV     0xfe,#-0x1
//  777                   P2DIR |= 0x01;  // 设置 P2.0 为输出方式 
        ORL     0xff,#0x1
//  778                   //P0_7 = 0;//关闭蜂鸣器
//  779                   //全亮     
//  780                   P0 |= (0x1 << 6); 
        SETB    0x80.6
//  781                   P1 = 0xff; 
        MOV     0x90,#-0x1
//  782                   P0 &= ~(0x1 << 6); 
        CLR     0x80.6
//  783                   
//  784                   P0 |= (0x1 << 5);         
        SETB    0x80.5
//  785                   P1 = 0x0; 
        MOV     0x90,#0x0
//  786                   P0 &= ~(0x1 << 5);   
        CLR     0x80.5
//  787                   break;
        SJMP    ??SampleApp_MessageMSGCB2_1
//  788                   case'B':
//  789                     P0DIR = (0x01<<0)|(0x01<<4)|(0x01<<5)|(0x01<<6)|(0x01<<7);  // 设置P0_0,P0_4,P0_5,P06,P0_7 为输出方式 
??SampleApp_MessageMSGCB2_2:
        MOV     0xfd,#-0xf
//  790                     P1DIR = 0xff;  // 设置 P1 为输出方式 
        MOV     0xfe,#-0x1
//  791                     P2DIR |= 0x01;  // 设置 P2.0 为输出方式 
        ORL     0xff,#0x1
//  792                    // P0_7 = 0;//关闭蜂鸣器
//  793                     //全灭     
//  794                     P0 |= (0x1 << 6); 
        SETB    0x80.6
//  795                     P1 = 0x0; 
        MOV     0x90,#0x0
//  796                     P0 &= ~(0x1 << 6); 
        CLR     0x80.6
//  797                     break;
        SJMP    ??SampleApp_MessageMSGCB2_1
//  798                    case'W':
//  799                      P0DIR = (0x01<<0)|(0x01<<4)|(0x01<<5)|(0x01<<6)|(0x01<<7);  // 设置P0_0,P0_4,P0_5,P06,P0_7 为输出方式 
??SampleApp_MessageMSGCB2_5:
        MOV     0xfd,#-0xf
//  800                      P0_7 = 1;//打开蜂鸣器
        SETB    0x80.7
//  801                     break;
        SJMP    ??SampleApp_MessageMSGCB2_1
//  802                     case'G':
//  803                       P0DIR = (0x01<<0)|(0x01<<4)|(0x01<<5)|(0x01<<6)|(0x01<<7);  // 设置P0_0,P0_4,P0_5,P06,P0_7 为输出方式 
??SampleApp_MessageMSGCB2_3:
        MOV     0xfd,#-0xf
//  804                       P0_7=0;
        CLR     0x80.7
//  805                       break;
//  806                      
//  807                      
//  808         }
//  809       break;
//  810   }
//  811 }
??SampleApp_MessageMSGCB2_1:
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock292
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR
        REQUIRE _A_P0
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond293 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond294 Using cfiCommon0
        CFI (cfiCond294) NoFunction
        CFI (cfiCond294) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond294) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond294) CFA_SP SP+0
        CFI (cfiCond294) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker295 Using cfiCommon1
        CFI (cfiPicker295) NoFunction
        CFI (cfiPicker295) Picker
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function osal_memset
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond293
        CFI EndBlock cfiCond294
        CFI EndBlock cfiPicker295

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for SrcShortAddr>`:
        DATA16
        DW 65535

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for topoBuffer>`:
        DATA8
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for commonClusterId>`:
        DATA16
        DW 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalInitTasks?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osalInitTasks

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??taskInitProcess?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    taskInitProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??createEndPoint?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    createEndPoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??controlEpProcess?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    controlEpProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??functionEpProcess?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    functionEpProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CreateUserTimer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CreateUserTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DeleteUserTimer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DeleteUserTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ModifyRefreshCycle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ModifyRefreshCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RouterTimeoutRoutine?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RouterTimeoutRoutine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RouterIncomingRoutine?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RouterIncomingRoutine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay100us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay100us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB2?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB2

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {3, 0, 0}>`:
        DB 3
        DB 0
        DB 0

        END
//  812 
// 
// 2 940 bytes in segment BANKED_CODE
//    84 bytes in segment BANK_RELAYS
//     5 bytes in segment SFR_AN
//    15 bytes in segment XDATA_I
//    15 bytes in segment XDATA_ID
//    24 bytes in segment XDATA_ROM_C
//    42 bytes in segment XDATA_Z
// 
// 3 039 bytes of CODE  memory
//    24 bytes of CONST memory
//     0 bytes of DATA  memory (+ 5 bytes shared)
//    57 bytes of XDATA memory
//
//Errors: none
//Warnings: none
