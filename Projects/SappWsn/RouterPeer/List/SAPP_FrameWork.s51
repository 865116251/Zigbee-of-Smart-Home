///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        29/May/2019  10:42:06 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\Source\SAPP_FrameWork.c                    /
//    Command line       =  -f D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Project /
//                          s\SappWsn\..\zstack\Tools\CC2530DB\f8wRouter.cfg  /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg     /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00100000         /
//                          -DZDAPP_CONFIG_PAN_ID=0x0213                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\Zigbee资料\协议栈\ZStac /
//                          k-CC2530-IOT\Projects\SappWsn\Source\SAPP_FrameWo /
//                          rk.c -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D     /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          PEER_ROUTER -lC D:\Zigbee资料\协议栈\ZStack-CC253 /
//                          0-IOT\Projects\SappWsn\RouterPeer\List\ -lA       /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\RouterPeer\List\ --diag_suppress           /
//                          Pe001,Pa010 -o D:\Zigbee资料\协议栈\ZStack-CC2530 /
//                          -IOT\Projects\SappWsn\RouterPeer\Obj\ -e          /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\ -I D:\Zigbee资料\协议栈\ZStack-CC2530-IOT /
//                          \Projects\SappWsn\Source\ -I                      /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\zstack\ZMain\TI2530DB\ -I               /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\hal\include\ -I           /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\hal\target\CC2530EB\ -I   /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\mac\include\ -I           /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\mac\high_level\ -I        /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\mac\low_level\srf04\ -I   /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\mac\low_level\srf04\singl /
//                          e_chip\ -I D:\Zigbee资料\协议栈\ZStack-CC2530-IOT /
//                          \Projects\SappWsn\..\..\Components\mt\ -I         /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\osal\include\ -I          /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\services\saddr\ -I        /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\services\sdata\ -I        /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\stack\af\ -I              /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\stack\nwk\ -I             /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\stack\sapi\ -I            /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\stack\sec\ -I             /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\stack\sys\ -I             /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\stack\zdo\ -I             /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\zmac\ -I                  /
//                          D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\..\..\Components\zmac\f8w\ -Ohz            /
//                          --require_prototypes                              /
//    List file          =  D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\S /
//                          appWsn\RouterPeer\List\SAPP_FrameWork.s51         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SAPP_FrameWork

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??CreateUserTimer?relay
        FUNCTION ??CreateUserTimer?relay,0203H
        PUBLIC ??Delay100us?relay
        FUNCTION ??Delay100us?relay,0203H
        PUBLIC ??DeleteUserTimer?relay
        FUNCTION ??DeleteUserTimer?relay,0203H
        PUBLIC ??ModifyRefreshCycle?relay
        FUNCTION ??ModifyRefreshCycle?relay,0203H
        PUBLIC ??RouterIncomingRoutine?relay
        FUNCTION ??RouterIncomingRoutine?relay,0203H
        PUBLIC ??RouterTimeoutRoutine?relay
        FUNCTION ??RouterTimeoutRoutine?relay,0203H
        PUBLIC ??SendData?relay
        FUNCTION ??SendData?relay,0203H
        FUNCTION ??controlEpProcess?relay,0203H
        FUNCTION ??createEndPoint?relay,0203H
        FUNCTION ??functionEpProcess?relay,0203H
        PUBLIC ??osalInitTasks?relay
        FUNCTION ??osalInitTasks?relay,0203H
        FUNCTION ??taskInitProcess?relay,0203H
        PUBLIC CreateUserTimer
        FUNCTION CreateUserTimer,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Delay100us
        FUNCTION Delay100us,080203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC DeleteUserTimer
        FUNCTION DeleteUserTimer,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ModifyRefreshCycle
        FUNCTION ModifyRefreshCycle,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC RouterIncomingRoutine
        FUNCTION RouterIncomingRoutine,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC RouterTimeoutRoutine
        FUNCTION RouterTimeoutRoutine,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SendData
        FUNCTION SendData,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC SrcShortAddr
        FUNCTION controlEpProcess,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION createEndPoint,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC funcTableBuffer
        FUNCTION functionEpProcess,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC osalInitTasks
        FUNCTION osalInitTasks,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION taskInitProcess,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC tasksArr
        PUBLIC tasksCnt
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
macTaskInit         SYMBOL "macTaskInit"
nwk_init            SYMBOL "nwk_init"
Hal_Init            SYMBOL "Hal_Init"
MT_TaskInit         SYMBOL "MT_TaskInit"
APS_Init            SYMBOL "APS_Init"
APSF_Init           SYMBOL "APSF_Init"
ZDApp_Init          SYMBOL "ZDApp_Init"
ZDNwkMgr_Init       SYMBOL "ZDNwkMgr_Init"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
afRegister          SYMBOL "afRegister"
osal_msg_receive    SYMBOL "osal_msg_receive"
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
memcpy              SYMBOL "memcpy"
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
HalLedBlink         SYMBOL "HalLedBlink"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
HalUARTWrite        SYMBOL "HalUARTWrite"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
AF_DataRequest      SYMBOL "AF_DataRequest"
MT_UartCalcFCS      SYMBOL "MT_UartCalcFCS"
osal_mem_free       SYMBOL "osal_mem_free"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??APSF_Init?relay   SYMBOL "?relay", APSF_Init
`?<Name APSF_ProcessEvent 25>` SYMBOL "APSF_ProcessEvent"
??APSF_ProcessEvent?relay SYMBOL "?relay", `?<Name APSF_ProcessEvent 25>`
??APS_Init?relay    SYMBOL "?relay", APS_Init
`?<Name APS_event_loop 28>` SYMBOL "APS_event_loop"
??APS_event_loop?relay SYMBOL "?relay", `?<Name APS_event_loop 28>`
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??Hal_Init?relay    SYMBOL "?relay", Hal_Init
`?<Name Hal_ProcessEvent 33>` SYMBOL "Hal_ProcessEvent"
??Hal_ProcessEvent?relay SYMBOL "?relay", `?<Name Hal_ProcessEvent 33>`
`?<Name MT_ProcessEvent 35>` SYMBOL "MT_ProcessEvent"
??MT_ProcessEvent?relay SYMBOL "?relay", `?<Name MT_ProcessEvent 35>`
??MT_TaskInit?relay SYMBOL "?relay", MT_TaskInit
??MT_UartCalcFCS?relay SYMBOL "?relay", MT_UartCalcFCS
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??ZDApp_Init?relay  SYMBOL "?relay", ZDApp_Init
`?<Name ZDApp_event_loop 43>` SYMBOL "ZDApp_event_loop"
??ZDApp_event_loop?relay SYMBOL "?relay", `?<Name ZDApp_event_loop 43>`
??ZDNwkMgr_Init?relay SYMBOL "?relay", ZDNwkMgr_Init
`?<Name ZDNwkMgr_event_loop 46>` SYMBOL "ZDNwkMgr_event_loop"
??ZDNwkMgr_event_loop?relay SYMBOL "?relay", `?<Name ZDNwkMgr_event_loop 46>`
??afRegister?relay  SYMBOL "?relay", afRegister
`?<Name macEventLoop 49>` SYMBOL "macEventLoop"
??macEventLoop?relay SYMBOL "?relay", `?<Name macEventLoop 49>`
??macTaskInit?relay SYMBOL "?relay", macTaskInit
??memcpy?relay      SYMBOL "?relay", memcpy
`?<Name nwk_event_loop 53>` SYMBOL "nwk_event_loop"
??nwk_event_loop?relay SYMBOL "?relay", `?<Name nwk_event_loop 53>`
??nwk_init?relay    SYMBOL "?relay", nwk_init
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
CreateUserTimer     SYMBOL "CreateUserTimer"
??CreateUserTimer?relay SYMBOL "?relay", CreateUserTimer
Delay100us          SYMBOL "Delay100us"
??Delay100us?relay  SYMBOL "?relay", Delay100us
DeleteUserTimer     SYMBOL "DeleteUserTimer"
??DeleteUserTimer?relay SYMBOL "?relay", DeleteUserTimer
ModifyRefreshCycle  SYMBOL "ModifyRefreshCycle"
??ModifyRefreshCycle?relay SYMBOL "?relay", ModifyRefreshCycle
RouterIncomingRoutine SYMBOL "RouterIncomingRoutine"
??RouterIncomingRoutine?relay SYMBOL "?relay", RouterIncomingRoutine
RouterTimeoutRoutine SYMBOL "RouterTimeoutRoutine"
??RouterTimeoutRoutine?relay SYMBOL "?relay", RouterTimeoutRoutine
SendData            SYMBOL "SendData"
??SendData?relay    SYMBOL "?relay", SendData
osalInitTasks       SYMBOL "osalInitTasks"
??osalInitTasks?relay SYMBOL "?relay", osalInitTasks

        EXTERN macTaskInit
        FUNCTION macTaskInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_init
        FUNCTION nwk_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_Init
        FUNCTION Hal_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_TaskInit
        FUNCTION MT_TaskInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APS_Init
        FUNCTION APS_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSF_Init
        FUNCTION APSF_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_Init
        FUNCTION ZDApp_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDNwkMgr_Init
        FUNCTION ZDNwkMgr_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartCalcFCS
        FUNCTION MT_UartCalcFCS,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??APSF_Init?relay
        FUNCTION ??APSF_Init?relay,00H
        EXTERN ??APSF_ProcessEvent?relay
        FUNCTION ??APSF_ProcessEvent?relay,00H
        EXTERN ??APS_Init?relay
        FUNCTION ??APS_Init?relay,00H
        EXTERN ??APS_event_loop?relay
        FUNCTION ??APS_event_loop?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??Hal_Init?relay
        FUNCTION ??Hal_Init?relay,00H
        EXTERN ??Hal_ProcessEvent?relay
        FUNCTION ??Hal_ProcessEvent?relay,00H
        EXTERN ??MT_ProcessEvent?relay
        FUNCTION ??MT_ProcessEvent?relay,00H
        EXTERN ??MT_TaskInit?relay
        FUNCTION ??MT_TaskInit?relay,00H
        EXTERN ??MT_UartCalcFCS?relay
        FUNCTION ??MT_UartCalcFCS?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??ZDApp_Init?relay
        FUNCTION ??ZDApp_Init?relay,00H
        EXTERN ??ZDApp_event_loop?relay
        FUNCTION ??ZDApp_event_loop?relay,00H
        EXTERN ??ZDNwkMgr_Init?relay
        FUNCTION ??ZDNwkMgr_Init?relay,00H
        EXTERN ??ZDNwkMgr_event_loop?relay
        FUNCTION ??ZDNwkMgr_event_loop?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??macEventLoop?relay
        FUNCTION ??macEventLoop?relay,00H
        EXTERN ??macTaskInit?relay
        FUNCTION ??macTaskInit?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??nwk_event_loop?relay
        FUNCTION ??nwk_event_loop?relay,00H
        EXTERN ??nwk_init?relay
        FUNCTION ??nwk_init?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN funcCount
        EXTERN funcList

// D:\Zigbee资料\协议栈\ZStack-CC2530-IOT\Projects\SappWsn\Source\SAPP_FrameWork.c
//    1 #include "SAPP_FrameWork.h"
//    2 #include <string.h>
//    3 #include <Lcd_Dis.h>
//    4 #include "hal_lcd.h"
//    5 /*********************************************************************
//    6  * FUNCTIONS
//    7  *********************************************************************/
//    8 static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep);
//    9 static void taskInitProcess(void);
//   10 static uint16 controlEpProcess(uint8 task_id, uint16 events);
//   11 static UINT16 functionEpProcess( uint8 task_id, uint16 events );

        RSEG XDATA_I:XDATA:NOROOT(0)
//   12 uint16 SrcShortAddr = 0xFFFF;//PeerToPeer时使用
SrcShortAddr:
        DATA16
        DS 2
        REQUIRE `?<Initializer for SrcShortAddr>`
        REQUIRE __INIT_XDATA_I
//   13 void Delay100us(uint16);
//   14 #if defined(ZDO_COORDINATOR) || defined(PEER_ROUTER) || defined(PEER_COORD)
//   15 static uint8 uartMsgProcesser(uint8 *msg);
//   16 #endif
//   17 
//   18 //uint8 ctrlBuffer[sizeof(TOPOINFO) + sizeof(FUNCTABLE) + FUNC_NUM * sizeof(FUNCINFO)];

        RSEG XDATA_I:XDATA:NOROOT(0)
//   19 static TOPOINFO topoBuffer = { 0x02 };
topoBuffer:
        DATA8
        DS 11
        REQUIRE `?<Initializer for topoBuffer>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   20 FUNCTABLE *funcTableBuffer;// = (FUNCTABLE *)(&ctrlBuffer[sizeof(TOPOINFO)]);
funcTableBuffer:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   21 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   22 const pTaskEventHandlerFn tasksArr[] = {
tasksArr:
        DATA16
        DW ??macEventLoop?relay
        DW ??nwk_event_loop?relay
        DW ??Hal_ProcessEvent?relay
        DW ??MT_ProcessEvent?relay
        DW ??APS_event_loop?relay
        DW ??APSF_ProcessEvent?relay
        DW ??ZDApp_event_loop?relay
        DW ??ZDNwkMgr_event_loop?relay
        DW ??controlEpProcess?relay
        DW ??functionEpProcess?relay
//   23     macEventLoop,
//   24     nwk_event_loop,
//   25     Hal_ProcessEvent,
//   26 #if defined( MT_TASK )
//   27     MT_ProcessEvent,
//   28 #endif
//   29     APS_event_loop,
//   30 #if defined ( ZIGBEE_FRAGMENTATION )
//   31     APSF_ProcessEvent,
//   32 #endif
//   33     ZDApp_event_loop,
//   34 #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
//   35     ZDNwkMgr_event_loop,
//   36 #endif
//   37     controlEpProcess,
//   38     functionEpProcess,
//   39 };

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   40 const uint8 tasksCnt = sizeof(tasksArr)/sizeof(tasksArr[0]);
tasksCnt:
        DB 10
//   41 /*********************************************************************
//   42 *********************************************************************/
//   43 
//   44 /*********************************************************************
//   45  * @fn      osalInitTasks
//   46  *
//   47  * @brief   This function invokes the initialization function for each task.
//   48  *
//   49  * @param   void
//   50  *
//   51  * @return  none
//   52  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   53 void osalInitTasks( void )
osalInitTasks:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function osalInitTasks
        CODE
//   54 {
        FUNCALL osalInitTasks, macTaskInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, nwk_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, Hal_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, MT_TaskInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, APS_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, APSF_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, ZDApp_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, ZDNwkMgr_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalInitTasks, taskInitProcess
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   55     uint8 taskID = 0;
//   56 
//   57     macTaskInit( taskID++ );
        ; Setup parameters for call to function macTaskInit
        MOV     R1,#0x0
        LCALL   ??macTaskInit?relay
//   58     nwk_init( taskID++ );
        ; Setup parameters for call to function nwk_init
        MOV     R1,#0x1
        LCALL   ??nwk_init?relay
//   59     Hal_Init( taskID++ );
        ; Setup parameters for call to function Hal_Init
        MOV     R1,#0x2
        LCALL   ??Hal_Init?relay
//   60 #if defined( MT_TASK )
//   61     MT_TaskInit( taskID++ );
        ; Setup parameters for call to function MT_TaskInit
        MOV     R1,#0x3
        LCALL   ??MT_TaskInit?relay
//   62 #endif
//   63     APS_Init( taskID++ );
        ; Setup parameters for call to function APS_Init
        MOV     R1,#0x4
        LCALL   ??APS_Init?relay
//   64 #if defined ( ZIGBEE_FRAGMENTATION )
//   65     APSF_Init( taskID++ );
        ; Setup parameters for call to function APSF_Init
        MOV     R1,#0x5
        LCALL   ??APSF_Init?relay
//   66 #endif
//   67     ZDApp_Init( taskID++ );
        ; Setup parameters for call to function ZDApp_Init
        MOV     R1,#0x6
        LCALL   ??ZDApp_Init?relay
//   68 #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZIGBEE_PANID_CONFLICT )
//   69     ZDNwkMgr_Init( taskID++ );
        ; Setup parameters for call to function ZDNwkMgr_Init
        MOV     R1,#0x7
        LCALL   ??ZDNwkMgr_Init?relay
//   70 #endif
//   71 #if defined(ZDO_COORDINATOR)// || defined(RTR_NWK)    
//   72     ClrScreen();        
//   73     FontSet_cn(1,1);                //16x16	
//   74     PutString_cn(24,0,"网络协调器");
//   75     PutString_cn(0,16,"---------------");
//   76     PutString_cn(8,32,"启动新的网络");	
//   77     PutString_cn(8,48,"正在启动...");	
//   78 #endif  
//   79     taskInitProcess();  
        ; Setup parameters for call to function taskInitProcess
        LCALL   ??taskInitProcess?relay
        CFI EndBlock cfiBlock0
//   80     //Hello_Init(taskID);
//   81 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//   82 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   83 static devStates_t curNwkState;
curNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   84 static uint8 controlTaskId;
controlTaskId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   85 static uint8 functionTaskId;
functionTaskId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   86 static struct ep_info_t controlEndPointInfo;
controlEndPointInfo:
        DS 33
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   87 static uint8 isUserTimerRunning = 0;
isUserTimerRunning:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   88 /*********************************************************************
//   89  * LOCAL FUNCTIONS
//   90  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   91 static void taskInitProcess(void)
taskInitProcess:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function taskInitProcess
        CODE
//   92 {
        FUNCALL taskInitProcess, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL taskInitProcess, createEndPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL taskInitProcess, createEndPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL taskInitProcess, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   93  #if defined ( BUILD_ALL_DEVICES )
//   94     // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//   95     // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//   96     // together - if they are - we will start up a coordinator. Otherwise,
//   97     // the device will start as a router.
//   98     if ( readCoordinatorJumper() )
//   99         zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  100     else
//  101         zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  102 #endif // BUILD_ALL_DEVICES
//  103 
//  104 #if defined ( HOLD_AUTO_START )
//  105     // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  106     //  from starting the device and wait for the application to
//  107     //  start the device.
//  108     ZDOInitDevice(0);
//  109 #endif
//  110 
//  111     // 构造功能列表
//  112     funcTableBuffer = createFuncTable(funcCount);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        MOV     B,#0x3
        MUL     AB
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,B
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#funcTableBuffer
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  113     funcTableBuffer->ft_type = 0x01;
        MOV     DPTR,#funcTableBuffer
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  114     funcTableBuffer->ft_count = funcCount;
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#funcTableBuffer
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_59:
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  115     int i;
//  116     for(i = 0; i < funcCount; i++)
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??taskInitProcess_0
//  117     {
//  118         funcTableBuffer->ft_list[i].type = funcList[i].function.type;
??taskInitProcess_1:
        LCALL   ?Subroutine14 & 0xFFFF
//  119         funcTableBuffer->ft_list[i].id = funcList[i].function.id;
//  120         funcTableBuffer->ft_list[i].cycle = funcList[i].function.cycle;
//  121     }
??CrossCallReturnLabel_48:
        MOV     R0,A
        MOV     A,#(funcList >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     R4,B
        MOV     B,#0x3
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_20:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_10:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#funcTableBuffer
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??taskInitProcess_0:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JC      ??taskInitProcess_1
//  122     controlTaskId = tasksCnt - 2; //排在 tasksArr[] 的最后两个。
        MOV     DPTR,#controlTaskId
        MOV     A,#0x8
        MOVX    @DPTR,A
//  123     functionTaskId = tasksCnt - 1;
        MOV     DPTR,#functionTaskId
        INC     A
        MOVX    @DPTR,A
//  124     createEndPoint(&controlEndPointInfo, &controlTaskId, CONTROL_ENDPOINT);
        ; Setup parameters for call to function createEndPoint
        MOV     R1,#-0x10
        MOV     R4,#controlTaskId & 0xff
        MOV     R5,#(controlTaskId >> 8) & 0xff
        MOV     R2,#controlEndPointInfo & 0xff
        MOV     R3,#(controlEndPointInfo >> 8) & 0xff
        LCALL   ??createEndPoint?relay
//  125     for(i = 0; i < funcCount; i++)
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??taskInitProcess_2
//  126     {
//  127         struct ep_info_t *ep = &funcList[i];
??taskInitProcess_3:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     ?V0 + 0,A
        MOV     A,#(funcList >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 1,A
//  128         createEndPoint(ep, &functionTaskId, i + 1);
        ; Setup parameters for call to function createEndPoint
        MOV     A,R6
        INC     A
        MOV     R1,A
        MOV     R4,#functionTaskId & 0xff
        MOV     R5,#(functionTaskId >> 8) & 0xff
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??createEndPoint?relay
//  129         if(ep->res_available)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_32:
        JZ      ??taskInitProcess_4
//  130           (*ep->res_available)(ep, ResInit, NULL);
        ; Setup parameters for indirect call
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R1,#0x1
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//  131     }
??taskInitProcess_4:
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??taskInitProcess_2:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        JC      ??taskInitProcess_3
//  132 #if defined(ZDO_COORDINATOR) || defined(PEER_ROUTER) || defined(PEER_COORD)   
//  133 //  RegisterForKeys( SampleApp_TaskID );
//  134     MT_UartRegisterTaskID(controlTaskId);     
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     DPTR,#controlTaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
        CFI EndBlock cfiBlock2
//  135 #endif  
//  136 }
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+-1
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     DPTR,#funcTableBuffer
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R4
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_24:
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG XDATA_I:XDATA:NOROOT(0)
??commonClusterId:
        DATA16
        DS 2
        REQUIRE `?<Initializer for commonClusterId>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        INC     DPTR
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        INC     DPTR
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46
//  137 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  138 static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep)
createEndPoint:
        CFI Block cfiBlock47 Using cfiCommon0
        CFI Function createEndPoint
        CODE
//  139 {
        FUNCALL createEndPoint, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  140     static cId_t commonClusterId = SAPP_PERIODIC_CLUSTERID;
//  141     // Fill out the endpoint description.
//  142     epInfo->task_id = *task_id;
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,#0xc
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_37:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  143     epInfo->ep = ep;
        MOV     A,R2
        ADD     A,#0xb
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV     A,R1
        LCALL   ?Subroutine12 & 0xFFFF
//  144     epInfo->timerTick = epInfo->function.cycle;
??CrossCallReturnLabel_11:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,#0xd
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_39:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  145     epInfo->userTimer = 0;
        LCALL   ?Subroutine8 & 0xFFFF
//  146 
//  147     epInfo->simpleDesc.EndPoint = ep;
??CrossCallReturnLabel_65:
        MOV     A,R2
        ADD     A,#0x15
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,R6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
//  148     epInfo->simpleDesc.AppProfId = SAPP_PROFID;
        MOV     A,R2
        ADD     A,#0x16
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     A,#0x8
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xf
        MOVX    @DPTR,A
//  149     epInfo->simpleDesc.AppDeviceId = SAPP_DEVICEID;
        MOV     A,R2
        ADD     A,#0x18
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  150     epInfo->simpleDesc.AppDevVer = SAPP_DEVICE_VERSION;
//  151     epInfo->simpleDesc.Reserved = 0;
        MOV     A,R2
        ADD     A,#0x1a
        LCALL   ??Subroutine32_0 & 0xFFFF
//  152     epInfo->simpleDesc.AppNumInClusters = 1;
??CrossCallReturnLabel_63:
        MOV     A,R2
        ADD     A,#0x1b
        LCALL   ?Subroutine10 & 0xFFFF
//  153     epInfo->simpleDesc.pAppInClusterList = &commonClusterId;
??CrossCallReturnLabel_8:
        ADD     A,#0x1c
        LCALL   ?Subroutine9 & 0xFFFF
//  154     epInfo->simpleDesc.AppNumOutClusters = 1;
??CrossCallReturnLabel_6:
        ADD     A,#0x1e
        LCALL   ?Subroutine10 & 0xFFFF
//  155     epInfo->simpleDesc.pAppOutClusterList = &commonClusterId;
??CrossCallReturnLabel_9:
        ADD     A,#0x1f
        LCALL   ?Subroutine9 & 0xFFFF
//  156 
//  157     epInfo->SampleApp_epDesc.endPoint = ep;
??CrossCallReturnLabel_7:
        ADD     A,#0xf
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
//  158     epInfo->SampleApp_epDesc.task_id = task_id;
        MOV     A,R2
        ADD     A,#0x10
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  159     epInfo->SampleApp_epDesc.simpleDesc = &epInfo->simpleDesc;
        MOV     A,R2
        ADD     A,#0x12
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  160     epInfo->SampleApp_epDesc.latencyReq = noLatencyReqs;
        MOV     A,R2
        ADD     A,#0x14
        LCALL   ??Subroutine32_0 & 0xFFFF
//  161 
//  162     // Register the endpoint description with the AF
//  163     afRegister(&epInfo->SampleApp_epDesc);
??CrossCallReturnLabel_64:
        ; Setup parameters for call to function afRegister
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        LCALL   ??afRegister?relay
//  164 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_21:
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_10
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_11
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+-1
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+-1
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+-1
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+-1
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R2
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker80 Using cfiCommon1
        CFI (cfiPicker80) NoFunction
        CFI (cfiPicker80) Picker
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#??commonClusterId & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??commonClusterId >> 8) & 0xff
        MOVX    @DPTR,A
        MOV     A,R2
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiPicker80
//  165 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  166 static uint16 controlEpProcess(uint8 task_id, uint16 events)
controlEpProcess:
        CFI Block cfiBlock81 Using cfiCommon0
        CFI Function controlEpProcess
        CODE
//  167 {
        FUNCALL controlEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL controlEpProcess, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  168     afIncomingMSGPacket_t *MSGpkt;
//  169     //系统消息事件。
//  170     if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??controlEpProcess_0 & 0xFFFF
//  171     {
//  172         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(task_id);
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??controlEpProcess_1
//  173         while ( MSGpkt )
//  174         {                
//  175             switch ( MSGpkt->hdr.event )
//  176             {         
//  177 //#if defined(ZDO_COORDINATOR) 
//  178 #if defined(ZDO_COORDINATOR) || defined(PEER_ROUTER) || defined(PEER_COORD)              
//  179             case CMD_SERIAL_MSG:
//  180 //              SampleApp_UartMessage((uint8 *)MSGpkt);                                          
//  181                 uartMsgProcesser((uint8 *)MSGpkt);
//  182                 HalLedBlink( HAL_LED_1, 2, 50, 90 );
//  183                 break;
//  184 #endif
//  185             // Received when a messages is received (OTA) for this endpoint
//  186             case AF_INCOMING_MSG_CMD:
//  187             {               
//  188                 #if defined(PEER_ROUTER) || defined(PEER_COORD)
//  189                     HalUARTWrite(HAL_UART_PORT_0, &(MSGpkt->cmd.Data[0]), 2);
//  190                     break;
//  191                 #endif
//  192                 // TODO: QueryProfile or QueryTopo
//  193                 switch(MSGpkt->clusterId)
//  194                 {
//  195                 case SAPP_PERIODIC_CLUSTERID:
//  196                     switch(MSGpkt->cmd.Data[0])
//  197                     {
//  198                     case 0x01:
//  199                         // CtrlQueryProfile
//  200                         // 获取到数据包的来源地址来当做发送数据的目标
//  201                         SendData(CONTROL_ENDPOINT, funcTableBuffer->ft_data, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(FUNCTABLE) + funcCount * sizeof(FUNCINFO));
//  202                         break;
//  203                     case 0x02:
//  204                         // CtrlQueryTopo
//  205                         // 获取到数据包的来源地址来当做发送数据的目标
//  206                         SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(TOPOINFO));                        
//  207                         break;
//  208                     case 0x03:
//  209                         // CtrlQuerySpecialFunction
//  210                         // cmd.Data[0] = 3, cmd.Data[1] = funcCode, cmd.Data[2] = funcID
//  211                         {
//  212                             uint8 i;
//  213                             for(i = 0; i < funcTableBuffer->ft_count; i++)
//  214                             {
//  215                                 if((funcTableBuffer->ft_list[i].type == MSGpkt->cmd.Data[1])
//  216                                    && (funcTableBuffer->ft_list[i].id == MSGpkt->cmd.Data[2]))
//  217                                 {
//  218                                     // 0x03, EndPoint, rCycle
//  219                                     uint8 specialFunc[3] = { 0x03, i + 1, funcTableBuffer->ft_list[i].cycle };
//  220                                     SendData(CONTROL_ENDPOINT, specialFunc, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(specialFunc));
//  221                                     break;
//  222                                 }
//  223                             }
//  224                         }
//  225                         break;
//  226                     default:
//  227                         {
//  228                             int i;
//  229                             for(i = 0; i < funcCount; i++)
//  230                             {
//  231                                 struct ep_info_t *ep = &funcList[i];
//  232                                 if(ep->res_available)   (*ep->res_available)(ep, ResControlPkg, MSGpkt);
//  233                             }
//  234                         }
//  235                         break;
//  236                     }               
//  237                     HalLedBlink( HAL_LED_1, 1, 50, 250 );
//  238                     break;
//  239                 }
//  240                 break;
//  241             }
//  242             // Received whenever the device changes state in the network
//  243             case ZDO_STATE_CHANGE:
//  244             {
//  245                 devStates_t st = (devStates_t)(MSGpkt->hdr.status);
??controlEpProcess_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
//  246                 if ( (st == DEV_ZB_COORD)
//  247                         || (st == DEV_ROUTER)
//  248                         || (st == DEV_END_DEVICE) )
        MOV     A,#0x9
        XRL     A,R0
        JZ      ??controlEpProcess_3
        MOV     A,#0x7
        XRL     A,R0
        JZ      ??controlEpProcess_3
        MOV     A,#0x6
        XRL     A,R0
        JNZ     ??controlEpProcess_4
//  249                 {
//  250 //                  topoBuffer->type = 0x02;
//  251                     memcpy(topoBuffer.IEEE, NLME_GetExtAddr(), 8);
??controlEpProcess_3:
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 4,#0x8
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#(topoBuffer + 1) & 0xff
        MOV     R3,#((topoBuffer + 1) >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  252 #if !defined(ZDO_COORDINATOR)
//  253                     topoBuffer.PAddr = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     DPTR,#topoBuffer + 9
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  254 #else                                                             
//  255                     topoBuffer.PAddr = 0xFFFF;
//  256                     uint8 i,TxPower;
//  257                     uint16 SrcSaddr;
//  258                     uint8 *LongAddr;//物理地址
//  259                     //显示协调器的配置信息
//  260                     ClrScreen();                                               
//  261                     PutString_cn(24,0,"网络协调器");
//  262                     TxPower = TXPOWER;
//  263                     HalLcdWriteStringValue( "Send Power:",TxPower, 16, HAL_LCD_LINE_2);                                           
//  264                     SrcSaddr = NLME_GetShortAddr();
//  265                     HalLcdWriteStringValue( "Short Addr:",SrcSaddr, 16, HAL_LCD_LINE_3);
//  266                     LongAddr = NLME_GetExtAddr();  
//  267                     for(i=0;i<8;i++)
//  268                         PutAbyte(i*16,48,LongAddr[i]);                                                                                                                                                                                                
//  269                     for(i=0;i<30;i++){
//  270                         TimeDelay(60000);
//  271                     }
//  272                     ClrScreen();                                                                                               
//  273                     PutString_cn(24,0,"网络协调器");	
//  274                     PutString_cn(0,16,"---------------");	                                                
//  275                     PutString_cn(4,32,"网络已成功建立");	
//  276                     PutString_cn(4,48,"可接收节点加入");	
//  277                     
//  278 #endif
//  279                     //向协调器发送拓扑信息
//  280                     SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO));
        ; Setup parameters for call to function SendData
        MOV     ?V0 + 3,#0xb
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 3,#0x1
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#topoBuffer & 0xff
        MOV     R3,#(topoBuffer >> 8) & 0xff
        MOV     R1,#-0x10
        LCALL   ??SendData?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  281                     HalLedBlink( HAL_LED_1, 1, 50, 250 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x6
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
??controlEpProcess_5:
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  282                 }
//  283             }
//  284             break;
//  285             default:
//  286                 break;
//  287             }
//  288             // Release the memory
//  289             osal_msg_deallocate( (uint8 *)MSGpkt );
??controlEpProcess_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  290             // Next - if one is available
//  291             MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        MOV     R1,?V0 + 2
??controlEpProcess_1:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_16:
        JZ      ??controlEpProcess_6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        DEC     A
        JZ      ??controlEpProcess_7
        ADD     A,#-0x19
        JZ      ??controlEpProcess_8
        ADD     A,#0x49
        JNZ     $+5
        LJMP    ??controlEpProcess_2 & 0xFFFF
        SJMP    ??controlEpProcess_4
??controlEpProcess_7:
        MOV     DPTR,#curNwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??controlEpProcess_9
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??controlEpProcess_9
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??controlEpProcess_10
??controlEpProcess_9:
        ; Setup parameters for call to function SendData
        MOV     ?V0 + 3,#0x8
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 3,#0x1
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,?V0 + 0
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R1,#-0x10
        LCALL   ??SendData?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
??controlEpProcess_10:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#0x5a
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x2
        SJMP    ??controlEpProcess_5
??controlEpProcess_8:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,?V0 + 0
        ADD     A,#0x22
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??controlEpProcess_4
//  292         }
//  293         // return unprocessed events
//  294         return (events ^ SYS_EVENT_MSG);  //返回当前任务待处理事件标志。
??controlEpProcess_6:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??controlEpProcess_11:
        MOV     R3,A
        LJMP    ??controlEpProcess_12 & 0xFFFF
//  295     }
//  296     // 定时器时间到, 遍历所有端点看是否有userTimer
//  297     if(events & SAPP_SEND_PERIODIC_MSG_EVT)
??controlEpProcess_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??controlEpProcess_13 & 0xFFFF
//  298     {
//  299         int i;
//  300         uint8 hasUserTimer = 0;
        MOV     ?V0 + 3,#0x0
//  301         for(i = 0; i < funcCount; i++)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??CrossCallReturnLabel_14
//  302         {
//  303             struct ep_info_t *ep = &funcList[i];
??controlEpProcess_14:
        MOV     A,?V0 + 0
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x21
        MOV     A,?V0 + 1
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     R2,A
        MOV     A,#(funcList >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
//  304             if(ep->userTimer && ep->res_available)
        MOV     A,R2
        ADD     A,#0xe
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_50:
        JZ      ??controlEpProcess_15
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_33:
        JZ      ??controlEpProcess_15
//  305             {
//  306                 hasUserTimer = 1;
        MOV     ?V0 + 3,#0x1
//  307                 ep->userTimer = ep->userTimer - 1;
        MOV     A,R2
        ADD     A,#0xe
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_51:
        DEC     A
        MOVX    @DPTR,A
//  308                 if(ep->userTimer <= 1)
        CLR     C
        SUBB    A,#0x2
        JNC     ??controlEpProcess_15
//  309                 {
//  310                     ep->userTimer = 0;
        CLR     A
        MOVX    @DPTR,A
//  311                     (*ep->res_available)(ep, ResUserTimer, NULL);
        ; Setup parameters for indirect call
        MOV     R4,A
        MOV     R5,A
        MOV     R1,#0x3
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
//  312                 }
//  313             }
//  314         }
??CrossCallReturnLabel_61:
        LCALL   ?CALL_IND
??controlEpProcess_15:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        JC      ??controlEpProcess_14
//  315         if(hasUserTimer)
        MOV     A,?V0 + 3
        MOV     C,0xE0 /* A   */.0
        JNC     ??controlEpProcess_16
//  316         {
//  317             // 重新启动定时器
//  318             osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,?V0 + 2
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??controlEpProcess_17
//  319         }
//  320         else
//  321         {
//  322             isUserTimerRunning = 0;
??controlEpProcess_16:
        MOV     DPTR,#isUserTimerRunning
        CLR     A
        MOVX    @DPTR,A
//  323             osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,A
        MOV     R1,?V0 + 2
        LCALL   ??osal_stop_timerEx?relay
//  324         }
//  325         // return unprocessed events
//  326         return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
??controlEpProcess_17:
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        LJMP    ??controlEpProcess_11 & 0xFFFF
//  327     }
//  328     // Discard unknown events
//  329     return 0;
??controlEpProcess_13:
        MOV     R2,#0x0
        MOV     R3,#0x0
??controlEpProcess_12:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock81
//  330 }
//  331 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  332 static uint16 functionEpProcess(uint8 task_id, uint16 events)
functionEpProcess:
        CFI Block cfiBlock82 Using cfiCommon0
        CFI Function functionEpProcess
        CODE
//  333 {
        FUNCALL functionEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL functionEpProcess, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 6,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  334     afIncomingMSGPacket_t *MSGpkt;
//  335     if(events & SYS_EVENT_MSG)
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??functionEpProcess_0 & 0xFFFF
//  336     {
//  337         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??functionEpProcess_1
//  338         while ( MSGpkt )
//  339         {
//  340             switch ( MSGpkt->hdr.event )
//  341             {
//  342             // 接收到数据包
//  343             case AF_INCOMING_MSG_CMD:
//  344                 //点对点及广播实验                
//  345                 {
//  346                     switch ( MSGpkt->clusterId )
//  347                     {
//  348                     case SAPP_PERIODIC_CLUSTERID:
//  349                         if(MSGpkt->endPoint <= funcCount)
//  350                         {
//  351                             struct ep_info_t *ep = &funcList[MSGpkt->endPoint - 1];
//  352                             if(ep->incoming_data)
//  353                                 (*ep->incoming_data)(ep, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, &MSGpkt->cmd);
//  354                         }
//  355                         HalLedBlink( HAL_LED_1, 1, 50, 250 );
//  356                         break;
//  357                     }
//  358                 }
//  359                 break;
//  360 
//  361             case ZDO_STATE_CHANGE:
//  362                 {
//  363                     curNwkState = (devStates_t)(MSGpkt->hdr.status);
//  364                     if ( (curNwkState == DEV_ZB_COORD)
//  365                             || (curNwkState == DEV_ROUTER)
//  366                             || (curNwkState == DEV_END_DEVICE) )
//  367                     {
//  368                         int i;
//  369                         int hasTimeOut = 0;
//  370                         for(i = 0; i < funcCount; i++)
//  371                         {
//  372                             struct ep_info_t *ep = &funcList[i];
//  373                             if(ep->nwk_stat_change)
//  374                                 (*ep->nwk_stat_change)(ep);
//  375                             // 重置端点计数器
//  376                             if(ep->time_out && ep->function.cycle)
//  377                             {
//  378                                 ep->timerTick = ep->function.cycle;
//  379                                 hasTimeOut = 1;
//  380                             }
//  381                         }
//  382                         if(hasTimeOut)
//  383                         {
//  384                             // 加入网络成功,启动定时器,为各个端点提供定时
//  385                             osal_start_timerEx(task_id,
//  386                                                SAPP_SEND_PERIODIC_MSG_EVT,
//  387                                                1000);
//  388                         }
//  389                     }
//  390                     else
//  391                         osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
??functionEpProcess_2:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,?V0 + 6
        LCALL   ??osal_stop_timerEx?relay
//  392                 }
//  393                 break;
//  394             default:
//  395                 break;
//  396             }
//  397             // Release the memory
//  398             osal_msg_deallocate( (uint8 *)MSGpkt );
??functionEpProcess_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  399             // Next - if one is available
//  400             MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        MOV     R1,?V0 + 6
??functionEpProcess_1:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_17:
        JNZ     $+5
        LJMP    ??functionEpProcess_4 & 0xFFFF
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??functionEpProcess_5
        ADD     A,#0x49
        JZ      ??functionEpProcess_6
        SJMP    ??functionEpProcess_3
??functionEpProcess_5:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??functionEpProcess_7
        INC     DPTR
        MOVX    A,@DPTR
??functionEpProcess_7:
        JNZ     ??functionEpProcess_3
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV     R0,A
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JC      ??functionEpProcess_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(funcList + 223) & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#((funcList - 33) >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_29:
        JZ      ??functionEpProcess_8
        ; Setup parameters for indirect call
        MOV     A,?V0 + 0
        ADD     A,#0x1f
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,?V0 + 0
        ADD     A,#0xf
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     R1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ?CALL_IND
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
??functionEpProcess_8:
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x6
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
        LJMP    ??functionEpProcess_3 & 0xFFFF
??functionEpProcess_6:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#curNwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??functionEpProcess_9
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??functionEpProcess_9
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      $+5
        LJMP    ??functionEpProcess_2 & 0xFFFF
??functionEpProcess_9:
        MOV     ?V0 + 4,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        SJMP    ??functionEpProcess_10
??functionEpProcess_11:
        MOV     A,?V0 + 2
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x21
        MOV     A,?V0 + 3
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     ?V0 + 8,A
        MOV     A,#(funcList >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 9,A
        MOV     DPL,?V0 + 8
        MOV     DPH,A
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_27:
        JZ      ??functionEpProcess_12
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
??functionEpProcess_12:
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_30:
        JZ      ??functionEpProcess_13
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??functionEpProcess_13
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 8
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,?V0 + 9
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_35:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V0 + 4,#0x1
??functionEpProcess_13:
        MOV     A,?V0 + 2
        ADD     A,#0x1
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
??functionEpProcess_10:
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R0
        MOV     A,?V0 + 3
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_22:
        JC      ??functionEpProcess_11
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??functionEpProcess_3 & 0xFFFF
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,?V0 + 6
        LCALL   ??osal_start_timerEx?relay
        LJMP    ??functionEpProcess_3 & 0xFFFF
//  401         }
//  402         // return unprocessed events
//  403         return (events ^ SYS_EVENT_MSG);
??functionEpProcess_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??functionEpProcess_14:
        MOV     R3,A
        LJMP    ??functionEpProcess_15 & 0xFFFF
//  404     }
//  405 
//  406     // 定时器时间到, 遍历所有端点看是否有需要调用time_out
//  407     if(events & SAPP_SEND_PERIODIC_MSG_EVT)
??functionEpProcess_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??functionEpProcess_16 & 0xFFFF
//  408     {
//  409         int i;
//  410         for(i = 0; i < funcCount; i++)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        SJMP    ??CrossCallReturnLabel_15
//  411         {
//  412             struct ep_info_t *ep = &funcList[i];
??functionEpProcess_17:
        MOV     A,?V0 + 0
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x21
        MOV     A,?V0 + 1
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     ?V0 + 2,A
        MOV     A,#(funcList >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 3,A
//  413             if(ep->time_out && ep->function.cycle)
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_31:
        JZ      ??functionEpProcess_18
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??functionEpProcess_18
//  414             {
//  415                 // 端点需要周期执行
//  416                 ep->timerTick = ep->timerTick - 1;
        MOV     A,?V0 + 2
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,?V0 + 3
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_52:
        DEC     A
        MOVX    @DPTR,A
//  417                 if(ep->timerTick == 0)
        JNZ     ??functionEpProcess_18
//  418                 {
//  419                   // 定时时间到,执行time_out函数
//  420                   (*ep->time_out)(ep);
        ; Setup parameters for indirect call
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL   ?CALL_IND
//  421                   ep->timerTick = ep->function.cycle;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 2
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,?V0 + 3
        LCALL   ??Subroutine26_0 & 0xFFFF
//  422                 }
//  423             }
//  424 #if 0
//  425             if(ep->userTimer && ep->res_available)
//  426             {
//  427                 ep->userTimer = ep->userTimer - 1;
//  428                 if(ep->userTimer <= 1)
//  429                 {
//  430                     (*ep->res_available)(ep, ResUserTimer, NULL);
//  431                     ep->userTimer = 0;
//  432                 }
//  433             }
//  434 #endif
//  435         }
??CrossCallReturnLabel_36:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
??functionEpProcess_18:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??functionEpProcess_17
//  436         // 重新启动定时器
//  437         osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,?V0 + 6
        LCALL   ??osal_start_timerEx?relay
//  438         // return unprocessed events
//  439         return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        LJMP    ??functionEpProcess_14 & 0xFFFF
//  440     }
//  441     // Discard unknown events
//  442     return 0;
??functionEpProcess_16:
        MOV     R2,#0x0
        MOV     R3,#0x0
??functionEpProcess_15:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock82
//  443 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond83 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker85 Using cfiCommon1
        CFI (cfiPicker85) NoFunction
        CFI (cfiPicker85) Picker
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        RET
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond89 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x21
        MOV     A,R1
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker97 Using cfiCommon1
        CFI (cfiPicker97) NoFunction
        CFI (cfiPicker97) Picker
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#funcList & 0xff
        ADD     A,R0
        RET
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiPicker97

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x14
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond109) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond109) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond109) CFA_SP SP+-5
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker114 Using cfiCommon1
        CFI (cfiPicker114) NoFunction
        CFI (cfiPicker114) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiPicker114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond115 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R0
        MOV     A,?V0 + 1
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_23:
        RET
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_3
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_0
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_1
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker126 Using cfiCommon1
        CFI (cfiPicker126) NoFunction
        CFI (cfiPicker126) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiPicker126
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
        CFI Block cfiCond127 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker130 Using cfiCommon1
        CFI (cfiPicker130) NoFunction
        CFI (cfiPicker130) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiPicker130
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
        CFI Block cfiCond131 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+-1
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker136 Using cfiCommon1
        CFI (cfiPicker136) NoFunction
        CFI (cfiPicker136) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiPicker136
//  444 
//  445 //#if defined(ZDO_COORDINATOR)
//  446 #if defined(ZDO_COORDINATOR) || defined(PEER_ROUTER) || defined(PEER_COORD)
//  447 #if defined(ZDO_COORDINATOR)
//  448     uint8 SendBuf[10];
//  449 #endif
//  450 static uint8 uartMsgProcesser(uint8 *msg)
//  451 {
//  452     mtOSALSerialData_t *pMsg = (mtOSALSerialData_t *)msg;
//  453     mtUserSerialMsg_t *pMsgBody = (mtUserSerialMsg_t *)pMsg->msg;
//  454     if ( (curNwkState != DEV_ZB_COORD)
//  455             && (curNwkState != DEV_ROUTER)
//  456             && (curNwkState != DEV_END_DEVICE) )
//  457         return 1;   
//  458 #if defined(PEER_COORD)
//  459     SendData(CONTROL_ENDPOINT, &msg[4],SrcShortAddr, TRANSFER_ENDPOINT,8);    
//  460     return 1;
//  461 #endif
//  462 
//  463 #if defined(PEER_ROUTER)
//  464     SendData(CONTROL_ENDPOINT, &msg[4],0x0000, TRANSFER_ENDPOINT,8);
//  465     return 1;
//  466 #endif        
//  467     switch(pMsgBody->cmd)
//  468     {
//  469         case 0x46B9:
//  470         {                  
//  471             switch(pMsgBody->cmdEndPoint)
//  472             {
//  473             case 0xF1:
//  474                 {                                 
//  475                     // 转发数据                    
//  476                     /*SendData(TRANSFER_ENDPOINT, pMsgBody->data,
//  477                              pMsgBody->addr, pMsgBody->endPoint,
//  478                              pMsgBody->len - 6);
//  479                     */
//  480                     SendData(TRANSFER_ENDPOINT, pMsgBody->data,
//  481                              0XFFFF, pMsgBody->endPoint,
//  482                              pMsgBody->len - 6);
//  483                 }
//  484                 break;
//  485 #if defined(ZDO_COORDINATOR)                
//  486             case 0xF0:
//  487                 HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  488                 HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  489                 Delay100us(5000);                
//  490                 HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  491                 HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
//  492                 Delay100us(5000);                
//  493                 HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  494                 HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );                
//  495                 SystemReset();  
//  496                 break;
//  497             case 0xEF:   
//  498                 SendBuf[0]=0x2;
//  499                 SendBuf[1]=0x7;
//  500                 SendBuf[2]=0xB9;
//  501                 SendBuf[3]=0x46;
//  502                 SendBuf[4]=0xEF;
//  503                 SendBuf[5]=0x0;
//  504                 SendBuf[6]=0x0;
//  505                 SendBuf[7]=0x0;
//  506                 SendBuf[8]=0x0;
//  507                 SendBuf[9]=0x17;
//  508                 HalUARTWrite(HAL_UART_PORT_0, &SendBuf[0], 10);    
//  509                 break;
//  510 #endif                
//  511             }            
//  512         }
//  513         break;
//  514     }
//  515     return 1;
//  516 }
//  517 #endif
//  518 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  519 uint8 SendData(uint8 srcEP, const void *buf, uint16 addr, uint8 dstEP, uint8 Len)
SendData:
        CFI Block cfiBlock137 Using cfiCommon0
        CFI Function SendData
        CODE
//  520 {
        FUNCALL SendData, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        MOV     R6,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R7,A
//  521     static uint8 transID = 0;
//  522     afAddrType_t SendDataAddr;
//  523     struct ep_info_t *epInfo;
//  524 
//  525     if(srcEP <= funcCount)
        MOV     DPTR,#funcCount
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R6
        JC      ??SendData_0
//  526         epInfo = &funcList[srcEP - 1];
        MOV     A,R6
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(funcList + 223) & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#((funcList - 33) >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        SJMP    ??SendData_1
//  527     else
//  528         epInfo = &controlEndPointInfo;
??SendData_0:
        MOV     R2,#controlEndPointInfo & 0xff
        MOV     R3,#(controlEndPointInfo >> 8) & 0xff
//  529 
//  530     SendDataAddr.addrMode = (afAddrMode_t)Addr16Bit;         //短地址发送
??SendData_1:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  531     SendDataAddr.endPoint = dstEP;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  532     SendDataAddr.addr.shortAddr = addr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  533     if ( AF_DataRequest( &SendDataAddr, //发送的地址和模式
//  534                          // TODO:
//  535                          &epInfo->SampleApp_epDesc,   //终端（比如操作系统中任务ID等）
//  536                          SAPP_PERIODIC_CLUSTERID,//发送串ID
//  537                          Len,
//  538                          (uint8*)buf,
//  539                          &transID,  //信息ID（操作系统参数）
//  540                          AF_DISCV_ROUTE,                         
//  541                          AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 2,#??transID & 0xff
        MOV     ?V0 + 3,#(??transID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,R7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     R1,#0x20
        MOV     A,R2
        ADD     A,#0xf
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        JNZ     ??SendData_2
//  542     {       
//  543         HalLedBlink( HAL_LED_1, 1, 50, 250 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x6
        MOV     R5,#0x0
        MOV     R3,#0x32
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  544         return 1;
        MOV     R1,#0x1
        SJMP    ??SendData_3
//  545     }
//  546     else
//  547     {
//  548         return 0;
??SendData_2:
        MOV     R1,#0x0
??SendData_3:
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock137
//  549     }
//  550 }

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??transID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  551 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  552 void CreateUserTimer(struct ep_info_t *ep, uint8 seconds)
CreateUserTimer:
        CFI Block cfiBlock138 Using cfiCommon0
        CFI Function CreateUserTimer
        CODE
//  553 {
        FUNCALL CreateUserTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  554     if(ep == NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??CreateUserTimer_0
//  555         return;
//  556     if(ep->res_available == NULL)
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_34:
        JZ      ??CreateUserTimer_0
//  557         return;
//  558     ep->userTimer = seconds;
        MOV     A,R2
        ADD     A,#0xe
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     A,R6
        MOVX    @DPTR,A
//  559     if(isUserTimerRunning == 0)
        MOV     DPTR,#isUserTimerRunning
        MOVX    A,@DPTR
        JNZ     ??CreateUserTimer_0
//  560     {
//  561         osal_start_timerEx(controlTaskId,
//  562                            SAPP_SEND_PERIODIC_MSG_EVT,
//  563                            1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#controlTaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  564         isUserTimerRunning = 1;
        MOV     DPTR,#isUserTimerRunning
        MOV     A,#0x1
        MOVX    @DPTR,A
??CreateUserTimer_0:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock138
//  565     }
//  566 }
//  567 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  568 void DeleteUserTimer(struct ep_info_t *ep)
DeleteUserTimer:
        CFI Block cfiBlock139 Using cfiCommon0
        CFI Function DeleteUserTimer
        CODE
//  569 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  570     if(ep == NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_66
//  571         return;
//  572     ep->userTimer = 0;
        LCALL   ?Subroutine8 & 0xFFFF
//  573 }
??CrossCallReturnLabel_66:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock139

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond140 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond141) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond141) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond141) CFA_SP SP+-5
        CFI Block cfiPicker142 Using cfiCommon1
        CFI (cfiPicker142) NoFunction
        CFI (cfiPicker142) Picker
        MOV     A,R2
        ADD     A,#0xe
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiPicker142
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
        CFI Block cfiCond143 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond146) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond146) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond146) CFA_SP SP+-5
        CFI Block cfiPicker147 Using cfiCommon1
        CFI (cfiPicker147) NoFunction
        CFI (cfiPicker147) Picker
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiPicker147
//  574 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  575 void ModifyRefreshCycle(struct ep_info_t *ep, uint8 seconds)
ModifyRefreshCycle:
        CFI Block cfiBlock148 Using cfiCommon0
        CFI Function ModifyRefreshCycle
        CODE
//  576 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  577     if(ep == NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??ModifyRefreshCycle_0
//  578         return;
//  579     if(ep->time_out == NULL)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??ModifyRefreshCycle_0
//  580         return;
//  581     ep->function.cycle = seconds;
        MOV     A,R1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  582     if(ep->timerTick > seconds)
        MOV     A,R2
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     R0,A
        MOV     A,R1
        CLR     C
        SUBB    A,R0
        JNC     ??ModifyRefreshCycle_0
//  583         ep->timerTick = seconds;
        MOV     A,R1
        MOVX    @DPTR,A
??ModifyRefreshCycle_0:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock148
//  584 }
//  585 
//  586 #if ! defined(ZDO_COORDINATOR) && defined(RTR_NWK) && !defined(PEER_ROUTER)
//  587 void RouterTimeoutRoutine(struct ep_info_t *ep)
//  588 {    
//  589     SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO)); //路由节点向协调器发送拓扑信息      
//  590 }
//  591 #elif defined(PEER_ROUTER)

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  592 void RouterTimeoutRoutine(struct ep_info_t *ep)
RouterTimeoutRoutine:
        CFI Block cfiBlock149 Using cfiCommon0
        CFI Function RouterTimeoutRoutine
        CODE
//  593 {
        ; Saved register size: 0
        ; Auto size: 0
//  594 }  
        LJMP    ?BRET
        CFI EndBlock cfiBlock149
//  595 #endif
//  596 
//  597 #if defined(ZDO_COORDINATOR)
//  598 void CoordinatorIncomingRoutine(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)
//  599 {
//  600     //msg->Data[], msg->DataLength, msg->TransSeqNumber
//  601     //转发数据到串口  
//  602     if(msg->DataLength > 0)
//  603     {
//  604         mtUserSerialMsg_t *pMsg = osal_mem_alloc(sizeof(mtUserSerialMsg_t) + msg->DataLength - 1);
//  605         pMsg->sop = MT_UART_SOF;
//  606         pMsg->len = msg->DataLength + 6;
//  607         pMsg->cmd = 0x46B9;
//  608         pMsg->cmdEndPoint = 0xF1;
//  609         pMsg->addr = addr;
//  610         SrcShortAddr = addr;//PeerToPeer时使用
//  611         pMsg->endPoint = endPoint;
//  612         if((endPoint == 0xF0)&&(addr !=0)){//为路由包且不为网关路由包
//  613             ClrScreen();                        
//  614             PutString_cn(24,0,"网络协调器");
//  615             PutString_cn(0,16,"---------------");
//  616             PutString_cn(4,32,"新节点加入");
//  617             HalLcdWriteStringValue( "Short Addr:",addr, 16, HAL_LCD_LINE_4);                                 
//  618         }                  
//  619         memcpy(pMsg->data, msg->Data, msg->DataLength);
//  620         pMsg->fsc = MT_UartCalcFCS(0, &pMsg->len, 1);
//  621         pMsg->fsc = MT_UartCalcFCS(pMsg->fsc, pMsg->dataBody, pMsg->len);
//  622         #if (defined(PEER_COORD)||(PEER_ROUTER))//简单无线收发实验
//  623         HalUARTWrite(HAL_UART_PORT_0, &pMsg->data[0], 1);        
//  624         #else
//  625         HalUARTWrite(HAL_UART_PORT_0, &pMsg->sop, sizeof(mtUserSerialMsg_t) - 2 + msg->DataLength);    
//  626         Delay100us(20);  
//  627         HalUARTWrite(HAL_UART_PORT_0, &pMsg->fsc, 1);
//  628         #endif
//  629         osal_mem_free(pMsg);
//  630     }
//  631 }
//  632 #elif defined(RTR_NWK) || defined(PEER_ROUTER) || defined(LIGHT)
//  633 #ifdef LIGHT
//  634 uint8 SegValue = 0;
//  635 bool MotorValue = 0;
//  636 extern const unsigned char seg7table[16];
//  637 #endif

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  638 void RouterIncomingRoutine(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)
RouterIncomingRoutine:
        CFI Block cfiBlock150 Using cfiCommon0
        CFI Function RouterIncomingRoutine
        CODE
//  639 {
        FUNCALL RouterIncomingRoutine, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RouterIncomingRoutine, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     ?V0 + 10,R1
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  640     //msg->Data[], msg->DataLength, msg->TransSeqNumber
//  641     // 转发数据到串口       
//  642     if(msg->DataLength > 0)
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_28:
        JNZ     $+5
        LJMP    ??RouterIncomingRoutine_0 & 0xFFFF
//  643     {                       
//  644         mtUserSerialMsg_t *pMsg = osal_mem_alloc(sizeof(mtUserSerialMsg_t) + msg->DataLength - 1);
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        ; Setup parameters for call to function osal_mem_alloc
        MOVX    A,@DPTR
        ADD     A,#0x9
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  645         pMsg->sop = MT_UART_SOF;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     A,#0x2
        MOVX    @DPTR,A
//  646         pMsg->len = msg->DataLength + 6;
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        ADD     A,#0x6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
//  647         pMsg->cmd = 0x46B9;
        MOV     A,R6
        ADD     A,#0x3
        MOV     ?V0 + 8,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
        MOV     DPL,?V0 + 8
        MOV     DPH,A
        MOV     A,#-0x47
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x46
        LCALL   ?Subroutine20 & 0xFFFF
//  648         pMsg->cmdEndPoint = 0xF1;
??CrossCallReturnLabel_25:
        MOV     A,#-0xf
        LCALL   ?Subroutine13 & 0xFFFF
//  649         pMsg->addr = addr;
??CrossCallReturnLabel_12:
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
//  650         SrcShortAddr = addr;//PeerToPeer时使用
        MOV     DPTR,#SrcShortAddr
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        LCALL   ?Subroutine13 & 0xFFFF
//  651         pMsg->endPoint = endPoint;                
??CrossCallReturnLabel_13:
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 10
        MOVX    @DPTR,A
//  652         memcpy(pMsg->data, msg->Data, msg->DataLength);
        ; Setup parameters for call to function memcpy
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x9
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  653         pMsg->fsc = MT_UartCalcFCS(0, &pMsg->len, 1);
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     R4,#0x1
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,#0x0
        LCALL   ?Subroutine17 & 0xFFFF
//  654         pMsg->fsc = MT_UartCalcFCS(pMsg->fsc, pMsg->dataBody, pMsg->len);
??CrossCallReturnLabel_18:
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ?Subroutine17 & 0xFFFF
//  655         #if defined(PEER_ROUTER)//简单无线收发实验
//  656         HalUARTWrite(HAL_UART_PORT_0, &pMsg->data[0], 1);        
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x9
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  657         #elif  defined(LIGHT)//点对点或广播通信实验      
//  658         HalUARTWrite(HAL_UART_PORT_0, &pMsg->data[0], 1);
//  659         //数码管控制
//  660         Sensor_PIN_INT(7);
//  661         P0 |= (0x1<<4);  
//  662         SegValue++;
//  663         if(SegValue>0xf) SegValue=0;      
//  664         P1 =  seg7table[SegValue];
//  665         P0 &= ~(0x1<<4); 
//  666         
//  667         Sensor_PIN_INT(6);
//  668        MotorValue = !MotorValue;
//  669         if(MotorValue == 0)//模拟电机停止
//  670             P0 &= (~(0x1 << 6));
//  671 
//  672         if(MotorValue == 1)//模拟电机启动
//  673             P0 |= (0x1 << 6);            
//  674         #else
//  675         HalUARTWrite(HAL_UART_PORT_0, &pMsg->sop, sizeof(mtUserSerialMsg_t) - 2 + msg->DataLength);       
//  676         Delay100us(20);
//  677         HalUARTWrite(HAL_UART_PORT_0, &pMsg->fsc, 1);
//  678         #endif
//  679         osal_mem_free(pMsg);
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  680     }
//  681 }
??RouterIncomingRoutine_0:
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock150

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond151 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker153 Using cfiCommon1
        CFI (cfiPicker153) NoFunction
        CFI (cfiPicker153) Picker
        LCALL   ??MT_UartCalcFCS?relay
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiPicker153

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond154 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker156 Using cfiCommon1
        CFI (cfiPicker156) NoFunction
        CFI (cfiPicker156) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_26:
        INC     DPTR
        RET
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiPicker156

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond157 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_12
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_13
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker160 Using cfiCommon1
        CFI (cfiPicker160) NoFunction
        CFI (cfiPicker160) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiPicker160
//  682 #endif
//  683 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  684 void Delay100us(uint16 Num)
Delay100us:
        CFI Block cfiBlock161 Using cfiCommon0
        CFI Function Delay100us
        CODE
//  685 {
        ; Saved register size: 0
        ; Auto size: 0
//  686   uint16 i;
//  687   uint8 j;
//  688   for(i=0;i<Num;i++){  
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??Delay100us_0
//  689     for(j=0;j<120;j++){
??Delay100us_1:
        MOV     A,#0x78
//  690       asm("NOP");
??Delay100us_2:
        NOP
//  691       asm("NOP");
        NOP
//  692       asm("NOP");
        NOP
//  693       asm("NOP");
        NOP
//  694       asm("NOP");
        NOP
//  695       asm("NOP");
        NOP
//  696       asm("NOP");
        NOP
//  697       asm("NOP");
        NOP
//  698       asm("NOP");
        NOP
//  699       asm("NOP");
        NOP
//  700     }
        DEC     A
        JNZ     ??Delay100us_2
//  701   }    
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??Delay100us_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??Delay100us_1
//  702 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock161

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for SrcShortAddr>`:
        DATA16
        DW 65535

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for topoBuffer>`:
        DATA8
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for commonClusterId>`:
        DATA16
        DW 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalInitTasks?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    osalInitTasks

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??taskInitProcess?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    taskInitProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??createEndPoint?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    createEndPoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??controlEpProcess?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    controlEpProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??functionEpProcess?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    functionEpProcess

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CreateUserTimer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CreateUserTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DeleteUserTimer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DeleteUserTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ModifyRefreshCycle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ModifyRefreshCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RouterTimeoutRoutine?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RouterTimeoutRoutine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RouterIncomingRoutine?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RouterIncomingRoutine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay100us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay100us

        END
// 
// 2 334 bytes in segment BANKED_CODE
//    72 bytes in segment BANK_RELAYS
//    15 bytes in segment XDATA_I
//    15 bytes in segment XDATA_ID
//    21 bytes in segment XDATA_ROM_C
//    40 bytes in segment XDATA_Z
// 
// 2 421 bytes of CODE  memory
//    21 bytes of CONST memory
//    55 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
